{"version":3,"file":"daumpostmap.js","names":["UrlManager","Template","DaumPostMap","constructor","target_id","map_x","map_y","map","doPrintMap","params","self","lat","lon","mapContainer","document","getElementById","mapOption","center","daum","maps","LatLng","level","Map","markerPosition","marker","Marker","position","setMap","doPostCodeAddress","target_postcode","target_address","jubun_address","querySelector","addEventListener","Activity","onStart","urlManager","location","pushState","pathname","makeJSON2URL","mode","render","then","tpl","outhtml_el","innerHTML","postcode_layer","postcode","load","Postcode","oncomplete","data","Log","d","fullAddr","extraAddr","userSelectedType","bname","buildingName","area","sido","value","zonecode","roadAddress","jibunAddress","sigungu","query","geocoder","addressSearch","result","status","services","Status","OK","y","x","bounds","LatLngBounds","extend","setBounds","onStop","width","height","maxSuggestItems","embed"],"sources":["daumpostmap.js"],"sourcesContent":["\"use strict\";\nimport UrlManager from '../../core/urlmanager.class.min.js';\n// import Template from '../../core/template.class.min.js';\nimport Template from '../../plugins/daumpostmap/daumpostmap.tpl.js';\nclass DaumPostMap {\n    constructor(target_id, map_x, map_y) {\n        this.target_id = target_id;\n        this.map_x = map_x || 127.489093909065;\n        this.map_y = map_y || 36.6423200323081;\n        this.map = null;\n        this.doPrintMap({});\n    }\n    doPrintMap(params) {\n        let self = this;\n        if (typeof params.lat !== 'undefined') {\n            self.map_y = params.lat;\n        }\n        if (typeof params.lon !== 'undefined') {\n            self.map_x = params.lon;\n        }\n        var mapContainer = document.getElementById('map'), mapOption = {\n            center: new daum.maps.LatLng(self.map_y, self.map_x),\n            level: 2 // 지도의 확대 레벨\n        };\n        // 지도를 생성합니다    \n        self.map = new daum.maps.Map(mapContainer, mapOption);\n        // 마커가 표시될 위치입니다 \n        var markerPosition = new daum.maps.LatLng(self.map_y, self.map_x);\n        var marker = new daum.maps.Marker({\n            position: markerPosition\n        });\n        marker.setMap(self.map);\n    }\n    doPostCodeAddress(target_postcode, target_address, jubun_address) {\n        let self = this;\n        // 우편번호찾기\n        document.querySelector(this.target_id).addEventListener('click', function () {\n            // panel\n            Activity.onStart('#bottomthird');\n            // url\n            const urlManager = new UrlManager(document.location);\n            urlManager.pushState('postcode', 'postcode', `${urlManager.pathname}?${urlManager.makeJSON2URL({ mode: 'postcode' })}`);\n            // 템플릿 파일 가지고 오기\n            new Template().render({})\n                .then(tpl => {\n                const outhtml_el = document.querySelector('#bottomthird');\n                outhtml_el.innerHTML = tpl;\n                return true;\n            })\n                .then(() => {\n                // target_id\n                var postcode_layer = document.getElementById('bottomthird_daumpostmap');\n                //load함수를 이용하여 core스크립트의 로딩이 완료된 후, 우편번호 서비스를 실행합니다.\n                daum.postcode.load(function () {\n                    new daum.Postcode({\n                        oncomplete: function (data) {\n                            Log.d(data);\n                            // 각 주소의 노출 규칙에 따라 주소를 조합한다.\n                            // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\n                            let fullAddr = ''; // 최종 주소 변수\n                            let extraAddr = ''; // 조합형 주소 변수\n                            // 사용자가 선택한 주소가 도로명 타입일때 조합한다.\n                            if (data.userSelectedType === 'R') {\n                                //법정동명이 있을 경우 추가한다.\n                                if (data.bname !== '') {\n                                    extraAddr += data.bname;\n                                }\n                                // 건물명이 있을 경우 추가한다.\n                                if (data.buildingName != '') {\n                                    extraAddr += (extraAddr != '') ? `, ${data.buildingName}` : data.buildingName;\n                                }\n                                // 조합형주소의 유무에 따라 양쪽에 괄호를 추가하여 최종 주소를 만든다.\n                                fullAddr += (extraAddr !== '' ? ` (${extraAddr})` : '');\n                            }\n                            // set postcode value\n                            let area = '';\n                            if (document.querySelector('#post_area')) {\n                                area = data.sido;\n                                // if(area == '서울'){\n                                //     area = area+'/'+data.sigungu;\n                                // }else if(area == '제주특별자치도'){\n                                //     area = area+'/'+data.sigungu;\n                                // }else if(area == '경기' \n                                //     || area == '강원'\n                                //     || area == '충북'\n                                //     || area == '충남'\n                                //     || area == '전북'\n                                //     || area == '전남'\n                                //     || area == '경북'\n                                //     || area == '경남'\n                                // ){\n                                //     var sg_argv = data.sigungu.split('시');\n                                //     area = data.sido+'/'+sg_argv[0];\n                                // }else {\n                                //     area = data.sido\n                                // }\n                                document.querySelector('#post_area').value = area;\n                            }\n                            document.querySelector(target_postcode).value = data.zonecode;\n                            document.querySelector(target_address).value = `${data.roadAddress} ${fullAddr}`;\n                            // $('#'+ids[0]+'_postcode').val(data.postcode1+''+data.postcode2);\n                            if (jubun_address !== null && jubun_address != '') {\n                                if (typeof data.jibunAddress !== 'undefined') {\n                                    document.querySelector(jubun_address).value = `${data.jibunAddress} ${fullAddr}`;\n                                }\n                                else {\n                                    document.querySelector(jubun_address).value = `${data.sido} ${data.sigungu} ${data.query} ${fullAddr}`;\n                                }\n                            }\n                            // 주소로 좌표값 얻기;\n                            geocoder.addressSearch(data.jibunAddress + ' ' + fullAddr, function (result, status) {\n                                Log.d(result);\n                                if (status === daum.maps.services.Status.OK) {\n                                    document.querySelector('#lat').value = result[0].y;\n                                    document.querySelector('#lon').value = result[0].x;\n                                    // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n                                    // LatLngBounds 객체에 좌표를 추가합니다\n                                    var bounds = new daum.maps.LatLngBounds();\n                                    var marker = new daum.maps.Marker({\n                                        map: self.map,\n                                        position: new daum.maps.LatLng(result[0].y, result[0].x)\n                                    });\n                                    bounds.extend(new daum.maps.LatLng(result[0].y, result[0].x));\n                                    // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n                                    self.map.setBounds(bounds);\n                                }\n                            });\n                            // close panel\n                            Activity.onStop('#bottomthird');\n                            // history.go(-2);\n                        },\n                        width: '100%',\n                        height: '500px',\n                        maxSuggestItems: 5\n                    }).embed(postcode_layer);\n                });\n            });\n        });\n    }\n}\nexport { DaumPostMap };\n"],"mappings":"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","ignoreList":[]}