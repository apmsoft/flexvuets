{"version":3,"file":"filepond-plugin-file-validate-type.js","names":["global","factory","exports","module","define","amd","self","FilePondPluginFileValidateType","plugin","_ref","addFilter","utils","Type","isString","replaceInString","guesstimateMimeType","getExtensionFromFilename","getFilenameFromURL","mimeTypeMatchesWildCard","mimeType","wildcard","mimeTypeGroup","exec","pop","wildcardGroup","slice","isValidMimeType","acceptedTypes","userInputType","some","acceptedType","test","getItemType","item","type","filename","extension","validateFile","acceptedFileTypes","typeDetector","length","Promise","resolve","reject","then","detectedType","catch","applyMimeTypeMap","map","acceptedFileType","Object","assign","accept","file","_ref2","query","_ref3","validationResult","handleRejection","acceptedFileTypesMapped","filter","label","status","main","sub","allTypes","join","allButLastType","lastType","options","allowFileTypeValidation","BOOLEAN","ARRAY","labelFileTypeNotAllowed","STRING","fileValidateTypeLabelExpectedTypes","fileValidateTypeLabelExpectedTypesMap","OBJECT","fileValidateTypeDetectType","FUNCTION","isBrowser","window","document","dispatchEvent","CustomEvent","detail"],"sources":["filepond-plugin-file-validate-type.js"],"sourcesContent":["\"use strict\";\n/*!\n * FilePondPluginFileValidateType 1.2.5\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n/* eslint-disable */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined'\n        ? (module.exports = factory())\n        : typeof define === 'function' && define.amd\n            ? define(factory)\n            : ((global = global || self),\n                (global.FilePondPluginFileValidateType = factory()));\n})(this, function () {\n    'use strict';\n    var plugin = function plugin(_ref) {\n        var addFilter = _ref.addFilter, utils = _ref.utils;\n        // get quick reference to Type utils\n        var Type = utils.Type, isString = utils.isString, replaceInString = utils.replaceInString, guesstimateMimeType = utils.guesstimateMimeType, getExtensionFromFilename = utils.getExtensionFromFilename, getFilenameFromURL = utils.getFilenameFromURL;\n        var mimeTypeMatchesWildCard = function mimeTypeMatchesWildCard(mimeType, wildcard) {\n            var mimeTypeGroup = (/^[^/]+/.exec(mimeType) || []).pop(); // image/png -> image\n            var wildcardGroup = wildcard.slice(0, -2); // image/* -> image\n            return mimeTypeGroup === wildcardGroup;\n        };\n        var isValidMimeType = function isValidMimeType(acceptedTypes, userInputType) {\n            return acceptedTypes.some(function (acceptedType) {\n                // accepted is wildcard mime type\n                if (/\\*$/.test(acceptedType)) {\n                    return mimeTypeMatchesWildCard(userInputType, acceptedType);\n                }\n                // is normal mime type\n                return acceptedType === userInputType;\n            });\n        };\n        var getItemType = function getItemType(item) {\n            // if the item is a url we guess the mime type by the extension\n            var type = '';\n            if (isString(item)) {\n                var filename = getFilenameFromURL(item);\n                var extension = getExtensionFromFilename(filename);\n                if (extension) {\n                    type = guesstimateMimeType(extension);\n                }\n            }\n            else {\n                type = item.type;\n            }\n            return type;\n        };\n        var validateFile = function validateFile(item, acceptedFileTypes, typeDetector) {\n            // no types defined, everything is allowed \\o/\n            if (acceptedFileTypes.length === 0) {\n                return true;\n            }\n            // gets the item type\n            var type = getItemType(item);\n            // no type detector, test now\n            if (!typeDetector) {\n                return isValidMimeType(acceptedFileTypes, type);\n            }\n            // use type detector\n            return new Promise(function (resolve, reject) {\n                typeDetector(item, type)\n                    .then(function (detectedType) {\n                    if (isValidMimeType(acceptedFileTypes, detectedType)) {\n                        resolve();\n                    }\n                    else {\n                        reject();\n                    }\n                })\n                    .catch(reject);\n            });\n        };\n        var applyMimeTypeMap = function applyMimeTypeMap(map) {\n            return function (acceptedFileType) {\n                return map[acceptedFileType] === null\n                    ? false\n                    : map[acceptedFileType] || acceptedFileType;\n            };\n        };\n        // setup attribute mapping for accept\n        addFilter('SET_ATTRIBUTE_TO_OPTION_MAP', function (map) {\n            return Object.assign(map, {\n                accept: 'acceptedFileTypes'\n            });\n        });\n        // filtering if an item is allowed in hopper\n        addFilter('ALLOW_HOPPER_ITEM', function (file, _ref2) {\n            var query = _ref2.query;\n            // if we are not doing file type validation exit\n            if (!query('GET_ALLOW_FILE_TYPE_VALIDATION')) {\n                return true;\n            }\n            // we validate the file against the accepted file types\n            return validateFile(file, query('GET_ACCEPTED_FILE_TYPES'));\n        });\n        // called for each file that is loaded\n        // right before it is set to the item state\n        // should return a promise\n        addFilter('LOAD_FILE', function (file, _ref3) {\n            var query = _ref3.query;\n            return new Promise(function (resolve, reject) {\n                if (!query('GET_ALLOW_FILE_TYPE_VALIDATION')) {\n                    resolve(file);\n                    return;\n                }\n                var acceptedFileTypes = query('GET_ACCEPTED_FILE_TYPES');\n                // custom type detector method\n                var typeDetector = query('GET_FILE_VALIDATE_TYPE_DETECT_TYPE');\n                // if invalid, exit here\n                var validationResult = validateFile(file, acceptedFileTypes, typeDetector);\n                var handleRejection = function handleRejection() {\n                    var acceptedFileTypesMapped = acceptedFileTypes\n                        .map(applyMimeTypeMap(query('GET_FILE_VALIDATE_TYPE_LABEL_EXPECTED_TYPES_MAP')))\n                        .filter(function (label) {\n                        return label !== false;\n                    });\n                    reject({\n                        status: {\n                            main: query('GET_LABEL_FILE_TYPE_NOT_ALLOWED'),\n                            sub: replaceInString(query('GET_FILE_VALIDATE_TYPE_LABEL_EXPECTED_TYPES'), {\n                                allTypes: acceptedFileTypesMapped.join(', '),\n                                allButLastType: acceptedFileTypesMapped\n                                    .slice(0, -1)\n                                    .join(', '),\n                                lastType: acceptedFileTypesMapped[acceptedFileTypesMapped.length - 1]\n                            })\n                        }\n                    });\n                };\n                // has returned new filename immidiately\n                if (typeof validationResult === 'boolean') {\n                    if (!validationResult) {\n                        return handleRejection();\n                    }\n                    return resolve(file);\n                }\n                // is promise\n                validationResult\n                    .then(function () {\n                    resolve(file);\n                })\n                    .catch(handleRejection);\n            });\n        });\n        // expose plugin\n        return {\n            // default options\n            options: {\n                // Enable or disable file type validation\n                allowFileTypeValidation: [true, Type.BOOLEAN],\n                // What file types to accept\n                acceptedFileTypes: [[], Type.ARRAY],\n                // - must be comma separated\n                // - mime types: image/png, image/jpeg, image/gif\n                // - extensions: .png, .jpg, .jpeg ( not enabled yet )\n                // - wildcards: image/*\n                // label to show when a type is not allowed\n                labelFileTypeNotAllowed: ['File is of invalid type', Type.STRING],\n                // nicer label\n                fileValidateTypeLabelExpectedTypes: [\n                    'Expects {allButLastType} or {lastType}',\n                    Type.STRING\n                ],\n                // map mime types to extensions\n                fileValidateTypeLabelExpectedTypesMap: [{}, Type.OBJECT],\n                // Custom function to detect type of file\n                fileValidateTypeDetectType: [null, Type.FUNCTION]\n            }\n        };\n    };\n    // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\n    var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n    if (isBrowser) {\n        document.dispatchEvent(new CustomEvent('FilePond:pluginloaded', { detail: plugin }));\n    }\n    return plugin;\n});\n"],"mappings":"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","ignoreList":[]}