{"version":3,"file":"draggable_clone.js","names":["onReady","lay_cource","document","querySelector","lay_train","addEventListener"],"sources":["draggable_clone.js"],"sourcesContent":["const onReady = () => {\n    const lay_cource = document.querySelector('#lay_cource');\n    const lay_train = document.querySelector('#lay_train');\n    // // sortable\n    // const sortable = new Sortable([lay_cource], {\n    //     draggable: '.dragable-sort-item',\n    //     sortAnimation: {\n    //         duration: 200,\n    //         easingFunction: 'ease-in-out',\n    //     }\n    // });\n    // sortable.on('sortable:start', () => {\n    //     // clone\n    //     lay_cource.classList.remove('dropzone');\n    // });\n    // sortable.on('sortable:stop', () => {\n    //     // clone\n    //     lay_cource.classList.add('dropzone');\n    // });\n    // // clone ---->\n    // let initialDropzone = null;\n    // let clonedNode : any  = null;\n    // function dragStart(e) {\n    //     // Record the initial dropzone because we want to use it in droppable:dropped.\n    //     initialDropzone = e.data.dropzone;\n    //     // Clone the source node and insert after the original node. Adding a class for\n    //     // some styling.\n    //     const originalNode = e.data.dragEvent.data.source;\n    //     clonedNode = originalNode.cloneNode(true);\n    //     clonedNode?.classList.add(\"draggable-clone\");\n    //     originalNode.parentNode.insertBefore(clonedNode, originalNode.nextSibling);\n    // }\n    // function dragDropped(e) {\n    //     if (!clonedNode) return;\n    //     // If the current dropzone is our initial one, then hide the cloned Node\n    //     // because otherwise you have the cloned node plus the dropped node.\n    //     const dropzone = e.data.dropzone;\n    //     if (initialDropzone === dropzone) clonedNode.style.display = \"none\";\n    //     else clonedNode.style.display = \"inherit\";\n    //     Handler.post(function(){\n    //         lay_cource.querySelectorAll('.draggable-item').forEach(el =>{\n    //             if(!el.classList.contains('dragable-sort-item')){\n    //                 el.classList.add('dragable-sort-item');\n    //             }\n    //         });\n    //     },50);\n    //     // 박스2 remove -> dragable-sort-item\n    //     Handler.post(function(){\n    //         if(lay_train){\n    //             lay_train.querySelectorAll('.dragable-sort-item').forEach(el =>{\n    //                 if(el.classList.contains('dragable-sort-item')){\n    //                     el.classList.remove('dragable-sort-item');\n    //                 }\n    //             });\n    //         }\n    //     },50);\n    // }\n    // //<----- end clone */\n    // // 드랍존\n    // const droppable = new Droppable.default(document.querySelectorAll('.drop-container'), {\n    //     draggable: '.draggable-item',\n    //     dropzone: '.dropzone',\n    //     plugins: [Plugins.Collidable.default,Plugins.ResizeMirror]\n    // });\n    // // clone --->\n    // droppable.on(\"droppable:start\", dragStart);\n    // droppable.on(\"droppable:dropped\", dragDropped);\n    // // <-- clone\n    // droppable.on('droppable:stop', () =>\n    // {\n    //     // 박스1 -> dragable-sort-item\n    //     Handler.post(function(){\n    //         lay_cource.querySelectorAll('.draggable-item').forEach(el =>{\n    //             if(!el.classList.contains('dragable-sort-item')){\n    //                 el.classList.add('dragable-sort-item');\n    //             }\n    //         });\n    //     },50);\n    //     // 박스2 remove -> dragable-sort-item\n    //     Handler.post(function(){\n    //         if(lay_train){\n    //             lay_train.querySelectorAll('.dragable-sort-item').forEach(el =>{\n    //                 if(el.classList.contains('dragable-sort-item')){\n    //                     el.classList.remove('dragable-sort-item');\n    //                 }\n    //             });\n    //         }\n    //     },50);\n    //     // 계속 박스1 로 드랍할 수 있도록 활성화\n    //     Handler.post(function(){\n    //         lay_cource.classList.remove('draggable-dropzone--occupied');\n    //     },10);\n    // });\n    // // sort 순번 바뀌기 활성화\n    // document.querySelector('#enable-cource-sort')!.addEventListener('click', function(this:any){\n    //     let _checked = this.checked;\n    //     if(_checked) {\n    //         lay_cource.classList.remove('dropzone');\n    //         lay_cource.querySelectorAll('.cursor-move').forEach(el => {\n    //             el.classList.remove('cursor-move');\n    //             el.classList.add('cursor-ns-resize');\n    //         });\n    //     }else{\n    //         lay_cource.classList.add('dropzone');\n    //         lay_cource.querySelectorAll('.cursor-ns-resize').forEach(el => {\n    //             el.classList.remove('cursor-ns-resize');\n    //             el.classList.add('cursor-move');\n    //         });\n    //     }\n    // },false);\n};\n// document ready\ndocument.addEventListener(\"DOMContentLoaded\", onReady);\nexport {};\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGA,CAAA,KAAM;EAClB,MAAMC,UAAU,GAAGC,QAAQ,CAACC,aAAa,CAAC,aAAa,CAAC;EACxD,MAAMC,SAAS,GAAGF,QAAQ,CAACC,aAAa,CAAC,YAAY,CAAC;EACtgBAAgB,CAAC,kBAAkB,EAAEL,OAAO,CAAC;AACtD","ignoreList":[]}