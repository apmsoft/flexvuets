{"version":3,"file":"Pan.js","names":["Gesture","util","DEFAULT_INPUTS","DEFAULT_MIN_THRESHOLD","Pan","constructor","options","type","numInputs","threshold","onStart","onMove","onEnd","start","inputs","forEach","input","progress","getGestureProgress","getId","active","lastEmitted","x","current","y","move","state","element","length","output","data","index","distanceFromLastEmit","distanceBetweenTwoPoints","reachedThreshold","packData","distanceFromOrigin","initial","currentDistance","directionFromOrigin","getAngle","currentDirection","change","currentDegree","Math","PI","degreeFromOrigin","end"],"sources":["Pan.js"],"sourcesContent":["/**\n * @file Pan.js\n * Contains the Pan class\n */\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\nconst DEFAULT_INPUTS = 1;\nconst DEFAULT_MIN_THRESHOLD = 1;\n/**\n * A Pan is defined as a normal movement in any direction on a screen.\n * Pan gestures do not track start events and can interact with distance gestures\n * @class Pan\n */\nclass Pan extends Gesture {\n    /**\n     * Constructor function for the Pan class.\n     * @param {Object} [options] - The options object.\n     * @param {Number} [options.numInputs=1] - Number of inputs for the\n     *  Pan gesture.\n     * @param {Number} [options.threshold=1] - The minimum number of\n     * pixels the input has to move to trigger this gesture.\n     * @param {Function} [options.onStart] - The on start callback\n     * @param {Function} [options.onMove] - The on move callback\n     * @param {Function} [options.onEnd] - The on end callback\n     */\n    constructor(options) {\n        super();\n        /**\n         * The type of the Gesture.\n         * @type {String}\n         */\n        this.type = 'pan';\n        /**\n         * The number of inputs to trigger a Pan can be variable,\n         * and the maximum number being a factor of the browser.\n         * @type {Number}\n         */\n        this.numInputs = (options && options.numInputs) ?\n            options.numInputs : DEFAULT_INPUTS;\n        /**\n         * The minimum amount in pixels the pan must move until it is fired.\n         * @type {Number}\n         */\n        this.threshold = (options && options.threshold) ?\n            options.threshold : DEFAULT_MIN_THRESHOLD;\n        /**\n         * The on start callback\n         */\n        if (options && options.onStart && typeof options.onStart === 'function') {\n            this.onStart = options.onStart;\n        }\n        /**\n         * The on move callback\n         */\n        if (options && options.onMove && typeof options.onMove === 'function') {\n            this.onMove = options.onMove;\n        }\n        /**\n         * The on end callback\n         */\n        if (options && options.onEnd && typeof options.onEnd === 'function') {\n            this.onEnd = options.onEnd;\n        }\n    }\n    /**\n     * Event hook for the start of a gesture. Marks each input as active,\n     * so it can invalidate any end events.\n     * @param {Array} inputs\n     */\n    start(inputs) {\n        inputs.forEach((input) => {\n            const progress = input.getGestureProgress(this.getId());\n            progress.active = true;\n            progress.lastEmitted = {\n                x: input.current.x,\n                y: input.current.y,\n            };\n        });\n        if (this.onStart) {\n            this.onStart(inputs);\n        }\n    }\n    /**\n     * move() - Event hook for the move of a gesture.\n     * Fired whenever the input length is met, and keeps a boolean flag that\n     * the gesture has fired at least once.\n     * @param {Array} inputs - The array of Inputs on the screen\n     * @param {Object} state - The state object of the current region.\n     * @param {Element} element - The element associated to the binding.\n     * @return {Object} - Returns the distance in pixels between the two inputs.\n     */\n    move(inputs, state, element) {\n        if (this.numInputs !== inputs.length)\n            return null;\n        const output = {\n            data: [],\n        };\n        inputs.forEach((input, index) => {\n            const progress = input.getGestureProgress(this.getId());\n            const distanceFromLastEmit = util.distanceBetweenTwoPoints(progress.lastEmitted.x, input.current.x, progress.lastEmitted.y, input.current.y);\n            const reachedThreshold = distanceFromLastEmit >= this.threshold;\n            if (progress.active && reachedThreshold) {\n                output.data[index] = packData(input, progress);\n                progress.lastEmitted.x = input.current.x;\n                progress.lastEmitted.y = input.current.y;\n            }\n        });\n        if (this.onMove) {\n            this.onMove(inputs, state, element, output);\n        }\n        return output;\n        function packData(input, progress) {\n            const distanceFromOrigin = util.distanceBetweenTwoPoints(input.initial.x, input.current.x, input.initial.y, input.current.y);\n            const currentDistance = util.distanceBetweenTwoPoints(progress.lastEmitted.x, input.current.x, progress.lastEmitted.y, input.current.y);\n            const directionFromOrigin = util.getAngle(input.initial.x, input.initial.y, input.current.x, input.current.y);\n            const currentDirection = util.getAngle(progress.lastEmitted.x, progress.lastEmitted.y, input.current.x, input.current.y);\n            const change = {\n                x: input.current.x - progress.lastEmitted.x,\n                y: input.current.y - progress.lastEmitted.y,\n            };\n            const currentDegree = currentDirection * 180 / Math.PI;\n            const degreeFromOrigin = directionFromOrigin * 180 / Math.PI;\n            return {\n                distanceFromOrigin,\n                currentDistance,\n                directionFromOrigin,\n                currentDirection,\n                change,\n                degreeFromOrigin,\n                currentDegree\n            };\n        }\n    }\n    /* move*/\n    /**\n     * end() - Event hook for the end of a gesture. If the gesture has at least\n     * fired once, then it ends on the first end event such that any remaining\n     * inputs will not trigger the event until all inputs have reached the\n     * touchend event. Any touchend->touchstart events that occur before all\n     * inputs are fully off the screen should not fire.\n     * @param {Array} inputs - The array of Inputs on the screen\n     * @return {null} - null if the gesture is not to be emitted,\n     *  Object with information otherwise.\n     */\n    end(inputs) {\n        inputs.forEach((input) => {\n            const progress = input.getGestureProgress(this.getId());\n            progress.active = false;\n        });\n        if (this.onEnd) {\n            this.onEnd(inputs);\n        }\n        return null;\n    }\n}\nexport default Pan;\n"],"mappings":"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","ignoreList":[]}