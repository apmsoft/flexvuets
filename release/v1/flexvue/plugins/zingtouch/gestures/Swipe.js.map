{"version":3,"file":"Swipe.js","names":["Gesture","util","DEFAULT_INPUTS","DEFAULT_MAX_REST_TIME","DEFAULT_ESCAPE_VELOCITY","DEFAULT_TIME_DISTORTION","DEFAULT_MAX_PROGRESS_STACK","Swipe","constructor","options","type","numInputs","maxRestTime","escapeVelocity","timeDistortion","maxProgressStack","onMove","onEnd","move","inputs","state","element","length","i","progress","getGestureProgress","getId","moves","push","time","Date","getTime","x","current","y","shift","end","output","data","currentMove","pop","lastMove","index","velocity","getVelocity","distance","distanceBetweenTwoPoints","duration","currentDirection","getAngle"],"sources":["Swipe.js"],"sourcesContent":["/**\n * @file Swipe.js\n * Contains the Swipe class\n */\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\nconst DEFAULT_INPUTS = 1;\nconst DEFAULT_MAX_REST_TIME = 100;\nconst DEFAULT_ESCAPE_VELOCITY = 0.2;\nconst DEFAULT_TIME_DISTORTION = 100;\nconst DEFAULT_MAX_PROGRESS_STACK = 10;\n/**\n * A swipe is defined as input(s) moving in the same direction in an relatively\n * increasing velocity and leaving the screen at some point before it drops\n * below it's escape velocity.\n * @class Swipe\n */\nclass Swipe extends Gesture {\n    /**\n     * Constructor function for the Swipe class.\n     * @param {Object} [options] - The options object.\n     * @param {Number} [options.numInputs] - The number of inputs to trigger a\n     * Swipe can be variable, and the maximum number being a factor of the browser\n     *  move and current move events.\n     * @param {Number} [options.maxRestTime] - The maximum resting time a point\n     *  has between it's last\n     * @param {Number} [options.escapeVelocity] - The minimum velocity the input\n     *  has to be at to emit a swipe.\n     * @param {Number} [options.timeDistortion] - (EXPERIMENTAL) A value of time\n     *  in milliseconds to distort between events.\n     * @param {Number} [options.maxProgressStack] - (EXPERIMENTAL)The maximum\n     *  amount of move events to keep\n     * track of for a swipe.\n     */\n    constructor(options) {\n        super();\n        /**\n         * The type of the Gesture\n         * @type {String}\n         */\n        this.type = 'swipe';\n        /**\n         * The number of inputs to trigger a Swipe can be variable,\n         * and the maximum number being a factor of the browser.\n         * @type {Number}\n         */\n        this.numInputs = (options && options.numInputs) ?\n            options.numInputs : DEFAULT_INPUTS;\n        /**\n         * The maximum resting time a point has between it's last move and\n         * current move events.\n         * @type {Number}\n         */\n        this.maxRestTime = (options && options.maxRestTime) ?\n            options.maxRestTime : DEFAULT_MAX_REST_TIME;\n        /**\n         * The minimum velocity the input has to be at to emit a swipe.\n         * This is useful for determining the difference between\n         * a swipe and a pan gesture.\n         * @type {number}\n         */\n        this.escapeVelocity = (options && options.escapeVelocity) ?\n            options.escapeVelocity : DEFAULT_ESCAPE_VELOCITY;\n        /**\n         * (EXPERIMENTAL) A value of time in milliseconds to distort between events.\n         * Browsers do not accurately measure time with the Date constructor in\n         * milliseconds, so consecutive events sometimes display the same timestamp\n         * but different x/y coordinates. This will distort a previous time\n         * in such cases by the timeDistortion's value.\n         * @type {number}\n         */\n        this.timeDistortion = (options && options.timeDistortion) ?\n            options.timeDistortion : DEFAULT_TIME_DISTORTION;\n        /**\n         * (EXPERIMENTAL) The maximum amount of move events to keep track of for a\n         * swipe. This helps give a more accurate estimate of the user's velocity.\n         * @type {number}\n         */\n        this.maxProgressStack = (options && options.maxProgressStack) ?\n            options.maxProgressStack : DEFAULT_MAX_PROGRESS_STACK;\n        /**\n         * The on move callback\n         */\n        if (options && options.onMove && typeof options.onMove === 'function') {\n            this.onMove = options.onMove;\n        }\n        /**\n         * The on end callback\n         */\n        if (options && options.onEnd && typeof options.onEnd === 'function') {\n            this.onEnd = options.onEnd;\n        }\n    }\n    /**\n     * Event hook for the move of a gesture. Captures an input's x/y coordinates\n     * and the time of it's event on a stack.\n     * @param {Array} inputs - The array of Inputs on the screen.\n     * @param {Object} state - The state object of the current region.\n     * @param {Element} element - The element associated to the binding.\n     * @return {null} - Swipe does not emit from a move.\n     */\n    move(inputs, state, element) {\n        if (this.numInputs === inputs.length) {\n            for (let i = 0; i < inputs.length; i++) {\n                let progress = inputs[i].getGestureProgress(this.getId());\n                if (!progress.moves) {\n                    progress.moves = [];\n                }\n                progress.moves.push({\n                    time: new Date().getTime(),\n                    x: inputs[i].current.x,\n                    y: inputs[i].current.y,\n                });\n                if (progress.length > this.maxProgressStack) {\n                    progress.moves.shift();\n                }\n            }\n        }\n        if (this.onMove) {\n            this.onMove(inputs, state, element);\n        }\n        return null;\n    }\n    /* move*/\n    /**\n     * Determines if the input's history validates a swipe motion.\n     * Determines if it did not come to a complete stop (maxRestTime), and if it\n     * had enough of a velocity to be considered (ESCAPE_VELOCITY).\n     * @param {Array} inputs - The array of Inputs on the screen\n     * @return {null|Object} - null if the gesture is not to be emitted,\n     *  Object with information otherwise.\n     */\n    end(inputs) {\n        if (this.numInputs === inputs.length) {\n            let output = {\n                data: [],\n            };\n            for (let i = 0; i < inputs.length; i++) {\n                // Determine if all input events are on the 'end' event.\n                if (inputs[i].current.type !== 'end') {\n                    return;\n                }\n                let progress = inputs[i].getGestureProgress(this.getId());\n                if (progress.moves && progress.moves.length > 2) {\n                    // CHECK : Return if the input has not moved in maxRestTime ms.\n                    let currentMove = progress.moves.pop();\n                    if ((new Date().getTime()) - currentMove.time > this.maxRestTime) {\n                        return null;\n                    }\n                    let lastMove;\n                    let index = progress.moves.length - 1;\n                    /* Date is unreliable, so we retrieve the last move event where\n                     the time is not the same. */\n                    while (index !== -1) {\n                        if (progress.moves[index].time !== currentMove.time) {\n                            lastMove = progress.moves[index];\n                            break;\n                        }\n                        index--;\n                    }\n                    /* If the date is REALLY unreliable, we apply a time distortion\n                     to the last event.\n                     */\n                    if (!lastMove) {\n                        lastMove = progress.moves.pop();\n                        lastMove.time += this.timeDistortion;\n                    }\n                    var velocity = util.getVelocity(lastMove.x, lastMove.y, lastMove.time, currentMove.x, currentMove.y, currentMove.time);\n                    output.data[i] = {\n                        velocity: velocity,\n                        distance: util.distanceBetweenTwoPoints(lastMove.x, currentMove.x, lastMove.y, currentMove.y),\n                        duration: currentMove.time - lastMove.time,\n                        currentDirection: util.getAngle(lastMove.x, lastMove.y, currentMove.x, currentMove.y),\n                    };\n                }\n            }\n            for (var i = 0; i < output.data.length; i++) {\n                if (velocity < this.escapeVelocity) {\n                    return null;\n                }\n            }\n            if (output.data.length > 0) {\n                if (this.onEnd) {\n                    this.onEnd(inputs, output);\n                }\n                return output;\n            }\n        }\n        return null;\n    }\n}\nexport default Swipe;\n"],"mappings":"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","ignoreList":[]}