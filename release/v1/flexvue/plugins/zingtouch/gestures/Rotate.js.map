{"version":3,"file":"Rotate.js","names":["Gesture","util","DEFAULT_INPUTS","Rotate","constructor","options","type","numInputs","onMove","move","inputs","state","element","numActiveInputs","currentPivot","initialPivot","input","bRect","getBoundingClientRect","x","left","width","y","top","height","getMidpoint","current","getRightMostInput","currentAngle","getAngle","progress","getGestureProgress","getId","initialAngle","previousAngle","distance","change","getAngularDistance","rotate","angle","distanceFromOrigin","distanceFromLast"],"sources":["Rotate.js"],"sourcesContent":["/**\n * @file Rotate.js\n * Contains the Rotate class\n */\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\nconst DEFAULT_INPUTS = 2;\n/**\n * A Rotate is defined as two inputs moving about a circle,\n * maintaining a relatively equal radius.\n * @class Rotate\n */\nclass Rotate extends Gesture {\n    /**\n     * Constructor function for the Rotate class.\n     */\n    constructor(options = {}) {\n        super();\n        /**\n         * The type of the Gesture.\n         * @type {String}\n         */\n        this.type = 'rotate';\n        /**\n         * The number of touches required to emit Rotate events.\n         * @type {Number}\n         */\n        this.numInputs = options.numInputs || DEFAULT_INPUTS;\n        /**\n         * The on move callback\n         */\n        if (options && options.onMove && typeof options.onMove === 'function') {\n            this.onMove = options.onMove;\n        }\n    }\n    /**\n     * move() - Event hook for the move of a gesture. Obtains the midpoint of two\n     * the two inputs and calculates the projection of the right most input along\n     * a unit circle to obtain an angle. This angle is compared to the previously\n     * calculated angle to output the change of distance, and is compared to the\n     * initial angle to output the distance from the initial angle to the current\n     * angle.\n     * @param {Array} inputs - The array of Inputs on the screen\n     * @param {Object} state - The state object of the current listener.\n     * @param {Element} element - The element associated to the binding.\n     * @return {null} - null if this event did not occur\n     * @return {Object} obj.angle - The current angle along the unit circle\n     * @return {Object} obj.distanceFromOrigin - The angular distance travelled\n     * from the initial right most point.\n     * @return {Object} obj.distanceFromLast - The change of angle between the\n     * last position and the current position.\n     */\n    move(inputs, state, element) {\n        const numActiveInputs = state.numActiveInputs();\n        if (this.numInputs !== numActiveInputs)\n            return null;\n        let currentPivot, initialPivot;\n        let input;\n        if (numActiveInputs === 1) {\n            const bRect = element.getBoundingClientRect();\n            currentPivot = {\n                x: bRect.left + bRect.width / 2,\n                y: bRect.top + bRect.height / 2,\n            };\n            initialPivot = currentPivot;\n            input = inputs[0];\n        }\n        else {\n            currentPivot = util.getMidpoint(inputs[0].current.x, inputs[1].current.x, inputs[0].current.y, inputs[1].current.y);\n            input = util.getRightMostInput(inputs);\n        }\n        // Translate the current pivot point.\n        const currentAngle = util.getAngle(currentPivot.x, currentPivot.y, input.current.x, input.current.y);\n        const progress = input.getGestureProgress(this.getId());\n        if (!progress.initialAngle) {\n            progress.initialAngle = progress.previousAngle = currentAngle;\n            progress.distance = progress.change = 0;\n        }\n        else {\n            progress.change = util.getAngularDistance(progress.previousAngle, currentAngle);\n            progress.distance = progress.distance + progress.change;\n        }\n        progress.previousAngle = currentAngle;\n        const rotate = {\n            angle: currentAngle,\n            distanceFromOrigin: progress.distance,\n            distanceFromLast: progress.change,\n        };\n        if (this.onMove) {\n            this.onMove(inputs, state, element, rotate);\n        }\n        return rotate;\n    }\n}\nexport default Rotate;\n"],"mappings":"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","ignoreList":[]}