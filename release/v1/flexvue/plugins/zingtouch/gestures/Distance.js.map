{"version":3,"file":"Distance.js","names":["Gesture","util","DEFAULT_INPUTS","DEFAULT_MIN_THRESHOLD","Distance","constructor","options","type","threshold","onStart","onMove","start","inputs","state","element","isValid","length","progress","getGestureProgress","getId","lastEmittedDistance","distanceBetweenTwoPoints","current","x","y","move","numActiveInputs","currentDistance","centerPoint","getMidpoint","change","Math","abs","movement","distance","center"],"sources":["Distance.js"],"sourcesContent":["/**\n * @file Distance.js\n * Contains the abstract Distance class\n */\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\nconst DEFAULT_INPUTS = 2;\nconst DEFAULT_MIN_THRESHOLD = 1;\n/**\n * A Distance is defined as two inputs moving either together or apart.\n * @class Distance\n */\nclass Distance extends Gesture {\n    /**\n     * Constructor function for the Distance class.\n     * @param {Object} options\n     * @param {Object} [options] - The options object.\n     * @param {Number} [options.threshold=1] - The minimum number of\n     *  pixels the input has to move to trigger this gesture.\n     * @param {Function} [options.onStart] - The on start callback\n     * @param {Function} [options.onMove] - The on move callback\n     */\n    constructor(options) {\n        super();\n        /**\n         * The type of the Gesture.\n         * @type {String}\n         */\n        this.type = 'distance';\n        /**\n         * The minimum amount in pixels the inputs must move until it is fired.\n         * @type {Number}\n         */\n        this.threshold = (options && options.threshold) ?\n            options.threshold : DEFAULT_MIN_THRESHOLD;\n        /**\n         * The on start callback\n         */\n        if (options && options.onStart && typeof options.onStart === 'function') {\n            this.onStart = options.onStart;\n        }\n        /**\n         * The on move callback\n         */\n        if (options && options.onMove && typeof options.onMove === 'function') {\n            this.onMove = options.onMove;\n        }\n    }\n    /**\n     * Event hook for the start of a gesture. Initialized the lastEmitted\n     * gesture and stores it in the first input for reference events.\n     * @param {Array} inputs\n     * @param {Object} state - The state object of the current region.\n     * @param {Element} element - The element associated to the binding.\n     */\n    start(inputs, state, element) {\n        if (!this.isValid(inputs, state, element)) {\n            return null;\n        }\n        if (inputs.length === DEFAULT_INPUTS) {\n            // Store the progress in the first input.\n            const progress = inputs[0].getGestureProgress(this.getId());\n            progress.lastEmittedDistance = util.distanceBetweenTwoPoints(inputs[0].current.x, inputs[1].current.x, inputs[0].current.y, inputs[1].current.y);\n        }\n        if (this.onStart) {\n            this.onStart(inputs, state, element);\n        }\n    }\n    /**\n     * Event hook for the move of a gesture.\n     *  Determines if the two points are moved in the expected direction relative\n     *  to the current distance and the last distance.\n     * @param {Array} inputs - The array of Inputs on the screen.\n     * @param {Object} state - The state object of the current region.\n     * @param {Element} element - The element associated to the binding.\n     * @return {Object | null} - Returns the distance in pixels between two inputs\n     */\n    move(inputs, state, element) {\n        if (state.numActiveInputs() === DEFAULT_INPUTS) {\n            const currentDistance = util.distanceBetweenTwoPoints(inputs[0].current.x, inputs[1].current.x, inputs[0].current.y, inputs[1].current.y);\n            const centerPoint = util.getMidpoint(inputs[0].current.x, inputs[1].current.x, inputs[0].current.y, inputs[1].current.y);\n            // Progress is stored in the first input.\n            const progress = inputs[0].getGestureProgress(this.getId());\n            const change = currentDistance - progress.lastEmittedDistance;\n            if (Math.abs(change) >= this.threshold) {\n                progress.lastEmittedDistance = currentDistance;\n                const movement = {\n                    distance: currentDistance,\n                    center: centerPoint,\n                    change,\n                };\n                if (this.onMove) {\n                    this.onMove(inputs, state, element, movement);\n                }\n                return movement;\n            }\n        }\n        return null;\n    }\n}\nexport default Distance;\n"],"mappings":"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","ignoreList":[]}