{"version":3,"file":"Gesture.js","names":["util","Gesture","constructor","type","id","setType","getType","setId","getId","update","object","Object","keys","forEach","key","start","inputs","state","element","move","end","isValid","every","input","isInside","initial","x","y"],"sources":["Gesture.js"],"sourcesContent":["/**\n * @file Gesture.js\n * Contains the Gesture class\n */\nimport util from './../core/util.js';\n/**\n * The Gesture class that all gestures inherit from.\n */\nclass Gesture {\n    /**\n     * Constructor function for the Gesture class.\n     * @class Gesture\n     */\n    constructor() {\n        /**\n         * The generic string type of gesture ('expand'|'distance'|\n         *  'rotate'|'swipe'|'tap').\n         * @type {String}\n         */\n        this.type = null;\n        /**\n         * The unique identifier for each gesture determined at bind time by the\n         * state object. This allows for distinctions across instance variables of\n         * Gestures that are created on the fly (e.g. Tap-1, Tap-2, etc).\n         * @type {String|null}\n         */\n        this.id = null;\n    }\n    /**\n     * Set the type of the gesture to be called during an event\n     * @param {String} type - The unique identifier of the gesture being created.\n     */\n    setType(type) {\n        this.type = type;\n    }\n    /**\n     * getType() - Returns the generic type of the gesture\n     * @return {String} - The type of gesture\n     */\n    getType() {\n        return this.type;\n    }\n    /**\n     * Set the id of the gesture to be called during an event\n     * @param {String} id - The unique identifier of the gesture being created.\n     */\n    setId(id) {\n        this.id = id;\n    }\n    /**\n     * Return the id of the event. If the id does not exist, return the type.\n     * @return {String}\n     */\n    getId() {\n        return (this.id !== null) ? this.id : this.type;\n    }\n    /**\n     * Updates internal properties with new ones, only if the properties exist.\n     * @param {Object} object\n     */\n    update(object) {\n        Object.keys(object).forEach(key => {\n            this[key] = object[key];\n        });\n    }\n    /**\n     * start() - Event hook for the start of a gesture\n     * @param {Array} inputs - The array of Inputs on the screen\n       * @param {Object} state - The state object of the current region.\n       * @param {Element} element - The element associated to the binding.\n     * @return {null|Object}  - Default of null\n     */\n    start(inputs, state, element) {\n        return null;\n    }\n    /**\n     * move() - Event hook for the move of a gesture\n     * @param {Array} inputs - The array of Inputs on the screen\n     * @param {Object} state - The state object of the current region.\n     * @param {Element} element - The element associated to the binding.\n     * @return {null|Object} - Default of null\n     */\n    move(inputs, state, element) {\n        return null;\n    }\n    /**\n     * end() - Event hook for the move of a gesture\n     * @param {Array} inputs - The array of Inputs on the screen\n     * @return {null|Object}  - Default of null\n     */\n    end(inputs) {\n        return null;\n    }\n    /**\n    * isValid() - Pre-checks to ensure the invariants of a gesture are satisfied.\n    * @param {Array} inputs - The array of Inputs on the screen\n    * @param {Object} state - The state object of the current region.\n    * @param {Element} element - The element associated to the binding.\n    * @return {boolean} - If the gesture is valid\n    */\n    isValid(inputs, state, element) {\n        return inputs.every(input => {\n            return util.isInside(input.initial.x, input.initial.y, element);\n        });\n    }\n}\nexport default Gesture;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAOA,IAAI;AACX;AACA;AACA;AACA,MAAMC,OAAO,CAAC;EACV;AACJ;AACA;AACA;EACIC,WAAWA,CAAA,EAAG;IACV;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,IAAI,GAAG,IAAI;IAChB;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,EAAE,GAAG,IAAI;EAClB;EACA;AACJ;AACA;AACA;EACIC,OAAOA,CAACF,IAAI,EAAE;IACV,IAAI,CAACA,IAAI,GAAGA,IAAI;EACpB;EACA;AACJ;AACA;AACA;EACIG,OAAOA,CAAA,EAAG;IACN,OAAO,IAAI,CAACH,IAAI;EACpB;EACA;AACJ;AACA;AACA;EACII,KAAKA,CAACH,EAAE,EAAE;IACN,IAAI,CAACA,EAAE,GAAGA,EAAE;EAChB;EACA;AACJ;AACA;AACA;EACII,KAAKA,CAAA,EAAG;IACJ,OAAQ,IAAI,CAACJ,EAAE,KAAK,IAAI,GAAI,IAAI,CAACA,EAAE,GAAG,IAAI,CAACD,IAAI;EACnD;EACA;AACJ;AACA;AACA;EACIM,MAAMA,CAACC,MAAM,EAAE;IACXC,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CAACG,OAAO,CAAC,CAAAC,GAAG,KAAI;MAC/B,IAAI,CAACA,GAAG,CAAC,GAAGJ,MAAM,CAACI,GAAG,CAAC;IAC3B,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,KAAKA,CAACC,MAAM,EAAEC,KAAK,EAAEC,OAAO,EAAE;IAC1B,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,IAAIA,CAACH,MAAM,EAAEC,KAAK,EAAEC,OAAO,EAAE;IACzB,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIE,GAAGA,CAACJ,MAAM,EAAE;IACR,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIK,OAAOA,CAACL,MAAM,EAAEC,KAAK,EAAEC,OAAO,EAAE;IAC5B,OAAOF,MAAM,CAACM,KAAK,CAAC,CAAAC,KAAK,KAAI;MACzB,OAAOvB,IAAI,CAACwB,QAAQ,CAACD,KAAK,CAACE,OAAO,CAACC,CAAC,EAAEH,KAAK,CAACE,OAAO,CAACE,CAAC,EAAET,OAAO,CAAC;IACnE,CAAC,CAAC;EACN;AACJ;AACA,eAAejB,OAAO","ignoreList":[]}