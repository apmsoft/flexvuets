{"version":3,"file":"Region.js","names":["Binder","Gesture","arbiter","State","Region","constructor","element","capture","preventDefault","id","state","eventNames","window","PointerEvent","TouchEvent","forEach","name","addEventListener","e","bind","gesture","handler","bindOnce","tagName","addBinding","unbind","bindings","retrieveBindingsByElement","unbound","binding","registeredGestures","registeredGesture","removeEventListener","getId","push","register","key","Error","setType","registerGesture","unregister","getType"],"sources":["Region.js"],"sourcesContent":["/**\n * @file Region.js\n */\nimport Binder from './Binder.js';\nimport Gesture from './../../gestures/Gesture.js';\nimport arbiter from './../arbiter.js';\nimport State from './State.js';\n/**\n * Allows the user to specify a region to capture all events to feed ZingTouch\n * into. This can be as narrow as the element itself, or as big as the document\n * itself. The more specific an area, the better performant the overall\n * application will perform. Contains API methods to bind/unbind specific\n * elements to corresponding gestures. Also contains the ability to\n * register/unregister new gestures.\n * @class Region\n */\nclass Region {\n    /**\n     * Constructor function for the Region class.\n     * @param {Element} element - The element to capture all\n     *  window events in that region to feed into ZingTouch.\n     * @param {boolean} [capture=false] - Whether the region listens for\n     *  captures or bubbles.\n     * @param {boolean} [preventDefault=true] - Whether the default browser\n     *  functionality should be disabled;\n     * @param {Number} id - The id of the region, assigned by the ZingTouch object\n     */\n    constructor(element, capture, preventDefault, id) {\n        /**\n         * The identifier for the Region. This is assigned by the ZingTouch object\n         * and is used to hash gesture id for uniqueness.\n         * @type {Number}\n         */\n        this.id = id;\n        /**\n         * The element being bound to.\n         * @type {Element}\n         */\n        this.element = element;\n        /**\n         * Whether the region listens for captures or bubbles.\n         * @type {boolean}\n         */\n        this.capture = (typeof capture !== 'undefined') ? capture : false;\n        /**\n         * Boolean to disable browser functionality such as scrolling and zooming\n         * over the region\n         * @type {boolean}\n         */\n        this.preventDefault = (typeof preventDefault !== 'undefined') ?\n            preventDefault : true;\n        /**\n         * The internal state object for a Region.\n         * Keeps track of registered gestures, inputs, and events.\n         * @type {State}\n         */\n        this.state = new State(id);\n        let eventNames = [];\n        if (window.PointerEvent && !window.TouchEvent) {\n            eventNames = [\n                'pointerdown',\n                'pointermove',\n                'pointerup',\n            ];\n        }\n        else {\n            eventNames = [\n                'mousedown',\n                'mousemove',\n                'mouseup',\n                'touchstart',\n                'touchmove',\n                'touchend',\n            ];\n        }\n        // Bind detected browser events to the region element.\n        eventNames.forEach((name) => {\n            element.addEventListener(name, (e) => {\n                arbiter(e, this);\n            }, this.capture);\n        });\n    }\n    /**\n     * Bind an element to a registered/unregistered gesture with\n     * multiple function signatures.\n     * @example\n     * bind(element) - chainable\n     * @example\n     * bind(element, gesture, handler, [capture])\n     * @param {Element} element - The element object.\n     * @param {String|Object} [gesture] - Gesture key, or a Gesture object.\n     * @param {Function} [handler] - The function to execute when an event is\n     *  emitted.\n     * @param {Boolean} [capture] - capture/bubble\n     * @param {Boolean} [bindOnce = false] - Option to bind once and\n     *  only emit the event once.\n     * @return {Object} - a chainable object that has the same function as bind.\n     */\n    bind(element, gesture, handler, capture, bindOnce) {\n        if (!element || (element && !element.tagName)) {\n            throw 'Bind must contain an element';\n        }\n        bindOnce = (typeof bindOnce !== 'undefined') ? bindOnce : false;\n        if (!gesture) {\n            return new Binder(element, bindOnce, this.state);\n        }\n        else {\n            this.state.addBinding(element, gesture, handler, capture, bindOnce);\n        }\n    }\n    /**\n     * Bind an element and sets up actions to remove the binding once\n     * it has been emitted for the first time.\n     * 1. bind(element) - chainable\n     * 2. bind(element, gesture, handler, [capture])\n     * @param {Element} element - The element object.\n     * @param {String|Object} gesture - Gesture key, or a Gesture object.\n     * @param {Function} handler - The function to execute when an\n     *  event is emitted.\n     * @param {Boolean} capture - capture/bubble\n     * @return {Object} - a chainable object that has the same function as bind.\n     */\n    bindOnce(element, gesture, handler, capture) {\n        this.bind(element, gesture, handler, capture, true);\n    }\n    /**\n     * Unbinds an element from either the specified gesture\n     *  or all if no element is specified.\n     * @param {Element} element -The element to remove.\n     * @param {String | Object} [gesture] - A String representing the gesture,\n     *   or the actual object being used.\n     * @return {Array} - An array of Bindings that were unbound to the element;\n     */\n    unbind(element, gesture) {\n        let bindings = this.state.retrieveBindingsByElement(element);\n        let unbound = [];\n        bindings.forEach((binding) => {\n            if (gesture) {\n                if (typeof gesture === 'string' &&\n                    this.state.registeredGestures[gesture]) {\n                    let registeredGesture = this.state.registeredGestures[gesture];\n                    if (registeredGesture.id === binding.gesture.id) {\n                        element.removeEventListener(binding.gesture.getId(), binding.handler, binding.capture);\n                        unbound.push(binding);\n                    }\n                }\n            }\n            else {\n                element.removeEventListener(binding.gesture.getId(), binding.handler, binding.capture);\n                unbound.push(binding);\n            }\n        });\n        return unbound;\n    }\n    /* unbind*/\n    /**\n     * Registers a new gesture with an assigned key\n     * @param {String} key - The key used to register an element to that gesture\n     * @param {Gesture} gesture - A gesture object\n     */\n    register(key, gesture) {\n        if (typeof key !== 'string') {\n            throw new Error('Parameter key is an invalid string');\n        }\n        if (!gesture instanceof Gesture) {\n            throw new Error('Parameter gesture is an invalid Gesture object');\n        }\n        gesture.setType(key);\n        this.state.registerGesture(gesture, key);\n    }\n    /* register*/\n    /**\n     * Un-registers a gesture from the Region's state such that\n     * it is no longer emittable.\n     * Unbinds all events that were registered with the type.\n     * @param {String|Object} key - Gesture key that was used to\n     *  register the object\n     * @return {Object} - The Gesture object that was unregistered\n     *  or null if it could not be found.\n     */\n    unregister(key) {\n        this.state.bindings.forEach((binding) => {\n            if (binding.gesture.getType() === key) {\n                binding.element.removeEventListener(binding.gesture.getId(), binding.handler, binding.capture);\n            }\n        });\n        let registeredGesture = this.state.registeredGestures[key];\n        delete this.state.registeredGestures[key];\n        return registeredGesture;\n    }\n}\nexport default Region;\n"],"mappings":"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","ignoreList":[]}