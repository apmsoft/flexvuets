{"version":3,"file":"paths.js","names":["_svgPathExp","_numbersExp","_scientific","_selectorExp","_DEG2RAD","Math","PI","_RAD2DEG","_sin","sin","_cos","cos","_abs","abs","_sqrt","sqrt","_atan2","atan2","_largeNum","_isString","value","_isNumber","_isUndefined","_temp","_temp2","_roundingNum","_wrapProgress","progress","round","_round","_roundPrecise","_splitSegment","rawPath","segIndex","i","t","segment","shift","subdivideSegment","length","splice","slice","_getSampleIndex","samples","l","_reverseRawPath","skipOuter","reverse","reversed","reverseSegment","_copyMetaData","source","copy","totalLength","lookup","minLength","resolution","totalPoints","_appendOrMerge","index","prevSeg","concat","_bestDistance","getRawPath","test","document","querySelector","e","getAttribute","_gsPath","_dirty","stringToRawPath","console","warn","copyRawPath","a","y","_createPath","ignore","path","createElementNS","attr","call","attributes","name","nodeName","toLowerCase","indexOf","setAttributeNS","nodeValue","_typeAttrs","rect","circle","ellipse","line","_attrToObj","attrs","props","split","obj","convertToPath","element","swap","type","tagName","circ","data","x","r","ry","rcirc","rycirc","points","w","h","x2","x3","x4","x5","x6","y2","y3","y4","y5","y6","getBBox","rx","width","height","join","cx","cy","x1","y1","match","setAttribute","rawPathToString","_gsRawPath","parentNode","insertBefore","removeChild","getRotationAtProgress","d","getProgressData","getRotationAtBezierT","b","c","sliceRawPath","start","end","loops","max","offset","min","cacheRawPathMeasurements","wrap","s","eSeg","sSeg","eSegIndex","sSegIndex","ei","si","sameSegment","sameBezier","wrapsBehind","sShift","eShift","totalSegments","j","angle","push","measureSegment","startIndex","bezierQty","inc","endIndex","samplesIndex","prevLength","xd","xd1","yd","yd1","inv","lengthIndex","segLength","pathLength","ax","ay","cp1x","cp1y","cp2x","cp2y","bx","by","x1a","y1a","x2a","y2a","decoratee","pushToNextIfAtEnd","getPositionOnPath","includeAngle","point","result","transformRawPath","tx","ty","arcToSegment","lastX","lastY","largeArcFlag","sweepFlag","angleRad","cosAngle","sinAngle","TWOPI","dx2","dy2","x1_sq","y1_sq","radiiCheck","rx_sq","ry_sq","sq","coef","cx1","cy1","sx2","sy2","ux","uy","vx","vy","temp","angleStart","acos","angleExtent","isNaN","segments","ceil","angleIncrement","controlLength","ma","mb","mc","md","replace","m","n","relativeX","relativeY","twoThirds","elements","errorMessage","command","isRelative","startX","startY","difX","difY","beziers","prevCommand","flag1","flag2","sx","sy","ex","ey","log","toUpperCase","closed","substr","charAt","pop","bezierToPoints","threshold","x12","y12","x23","y23","x34","y34","x123","y123","x234","y234","x1234","y1234","dx","dy","d2","d3","flatPointsToSegment","curviness","pointsToSegment","cornerThreshold","nextX","nextY","prevX","prevY","slope","dx1","dx3","dy1","dy3","d1","unshift","pointToSegDist","pow","simplifyStep","first","last","tolerance","simplified","maxSqDist","firstX","firstY","simplifyPoints","parseFloat","getClosestProgressOnBezier","iterations","px","py","slices","x0","y0","best","getClosestData","closest","bestDistance","subdivideSegmentNear","bestT","bestSegmentIndex","sl"],"sources":["paths.js"],"sourcesContent":["/*!\n * paths 3.8.0\n * https://greensock.com\n *\n * Copyright 2008-2021, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n/* eslint-disable */\nvar _svgPathExp = /[achlmqstvz]|(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig, _numbersExp = /(?:(-)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig, _scientific = /[\\+\\-]?\\d*\\.?\\d+e[\\+\\-]?\\d+/ig, _selectorExp = /(^[#\\.][a-z]|[a-y][a-z])/i, _DEG2RAD = Math.PI / 180, _RAD2DEG = 180 / Math.PI, _sin = Math.sin, _cos = Math.cos, _abs = Math.abs, _sqrt = Math.sqrt, _atan2 = Math.atan2, _largeNum = 1e8, _isString = function _isString(value) {\n    return typeof value === \"string\";\n}, _isNumber = function _isNumber(value) {\n    return typeof value === \"number\";\n}, _isUndefined = function _isUndefined(value) {\n    return typeof value === \"undefined\";\n}, _temp = {}, _temp2 = {}, _roundingNum = 1e5, _wrapProgress = function _wrapProgress(progress) {\n    return Math.round((progress + _largeNum) % 1 * _roundingNum) / _roundingNum || (progress < 0 ? 0 : 1);\n}, \n//if progress lands on 1, the % will make it 0 which is why we || 1, but not if it's negative because it makes more sense for motion to end at 0 in that case.\n_round = function _round(value) {\n    return Math.round(value * _roundingNum) / _roundingNum || 0;\n}, _roundPrecise = function _roundPrecise(value) {\n    return Math.round(value * 1e10) / 1e10 || 0;\n}, _splitSegment = function _splitSegment(rawPath, segIndex, i, t) {\n    var segment = rawPath[segIndex], shift = t === 1 ? 6 : subdivideSegment(segment, i, t);\n    if (shift && shift + i + 2 < segment.length) {\n        rawPath.splice(segIndex, 0, segment.slice(0, i + shift + 2));\n        segment.splice(0, i + shift);\n        return 1;\n    }\n}, _getSampleIndex = function _getSampleIndex(samples, length, progress) {\n    // slightly slower way than doing this (when there's no lookup): segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0;\n    var l = samples.length, i = ~~(progress * l);\n    if (samples[i] > length) {\n        while (--i && samples[i] > length) { }\n    }\n    else {\n        while (samples[++i] < length && i < l) { }\n    }\n    return i < l ? i : l - 1;\n}, _reverseRawPath = function _reverseRawPath(rawPath, skipOuter) {\n    var i = rawPath.length;\n    skipOuter || rawPath.reverse();\n    while (i--) {\n        rawPath[i].reversed || reverseSegment(rawPath[i]);\n    }\n}, _copyMetaData = function _copyMetaData(source, copy) {\n    copy.totalLength = source.totalLength;\n    if (source.samples) {\n        //segment\n        copy.samples = source.samples.slice(0);\n        copy.lookup = source.lookup.slice(0);\n        copy.minLength = source.minLength;\n        copy.resolution = source.resolution;\n    }\n    else if (source.totalPoints) {\n        //rawPath\n        copy.totalPoints = source.totalPoints;\n    }\n    return copy;\n}, \n//pushes a new segment into a rawPath, but if its starting values match the ending values of the last segment, it'll merge it into that same segment (to reduce the number of segments)\n_appendOrMerge = function _appendOrMerge(rawPath, segment) {\n    var index = rawPath.length, prevSeg = rawPath[index - 1] || [], l = prevSeg.length;\n    if (index && segment[0] === prevSeg[l - 2] && segment[1] === prevSeg[l - 1]) {\n        segment = prevSeg.concat(segment.slice(2));\n        index--;\n    }\n    rawPath[index] = segment;\n}, _bestDistance;\n/* TERMINOLOGY\n - RawPath - an array of arrays, one for each Segment. A single RawPath could have multiple \"M\" commands, defining Segments (paths aren't always connected).\n - Segment - an array containing a sequence of Cubic Bezier coordinates in alternating x, y, x, y format. Starting anchor, then control point 1, control point 2, and ending anchor, then the next control point 1, control point 2, anchor, etc. Uses less memory than an array with a bunch of {x, y} points.\n - Bezier - a single cubic Bezier with a starting anchor, two control points, and an ending anchor.\n - the variable \"t\" is typically the position along an individual Bezier path (time) and it's NOT linear, meaning it could accelerate/decelerate based on the control points whereas the \"p\" or \"progress\" value is linearly mapped to the whole path, so it shouldn't really accelerate/decelerate based on control points. So a progress of 0.2 would be almost exactly 20% along the path. \"t\" is ONLY in an individual Bezier piece.\n */\n//accepts basic selector text, a path instance, a RawPath instance, or a Segment and returns a RawPath (makes it easy to homogenize things). If an element or selector text is passed in, it'll also cache the value so that if it's queried again, it'll just take the path data from there instead of parsing it all over again (as long as the path data itself hasn't changed - it'll check).\nexport function getRawPath(value) {\n    value = _isString(value) && _selectorExp.test(value) ? document.querySelector(value) || value : value;\n    var e = value.getAttribute ? value : 0, rawPath;\n    if (e && (value = value.getAttribute(\"d\"))) {\n        //implements caching\n        if (!e._gsPath) {\n            e._gsPath = {};\n        }\n        rawPath = e._gsPath[value];\n        return rawPath && !rawPath._dirty ? rawPath : e._gsPath[value] = stringToRawPath(value);\n    }\n    return !value ? console.warn(\"Expecting a <path> element or an SVG path data string\") : _isString(value) ? stringToRawPath(value) : _isNumber(value[0]) ? [value] : value;\n} //copies a RawPath WITHOUT the length meta data (for speed)\nexport function copyRawPath(rawPath) {\n    var a = [], i = 0;\n    for (; i < rawPath.length; i++) {\n        a[i] = _copyMetaData(rawPath[i], rawPath[i].slice(0));\n    }\n    return _copyMetaData(rawPath, a);\n}\nexport function reverseSegment(segment) {\n    var i = 0, y;\n    segment.reverse(); //this will invert the order y, x, y, x so we must flip it back.\n    for (; i < segment.length; i += 2) {\n        y = segment[i];\n        segment[i] = segment[i + 1];\n        segment[i + 1] = y;\n    }\n    segment.reversed = !segment.reversed;\n}\nvar _createPath = function _createPath(e, ignore) {\n    var path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\"), attr = [].slice.call(e.attributes), i = attr.length, name;\n    ignore = \",\" + ignore + \",\";\n    while (--i > -1) {\n        name = attr[i].nodeName.toLowerCase(); //in Microsoft Edge, if you don't set the attribute with a lowercase name, it doesn't render correctly! Super weird.\n        if (ignore.indexOf(\",\" + name + \",\") < 0) {\n            path.setAttributeNS(null, name, attr[i].nodeValue);\n        }\n    }\n    return path;\n}, _typeAttrs = {\n    rect: \"rx,ry,x,y,width,height\",\n    circle: \"r,cx,cy\",\n    ellipse: \"rx,ry,cx,cy\",\n    line: \"x1,x2,y1,y2\"\n}, _attrToObj = function _attrToObj(e, attrs) {\n    var props = attrs ? attrs.split(\",\") : [], obj = {}, i = props.length;\n    while (--i > -1) {\n        obj[props[i]] = +e.getAttribute(props[i]) || 0;\n    }\n    return obj;\n}; //converts an SVG shape like <circle>, <rect>, <polygon>, <polyline>, <ellipse>, etc. to a <path>, swapping it in and copying the attributes to match.\nexport function convertToPath(element, swap) {\n    var type = element.tagName.toLowerCase(), circ = 0.552284749831, data, x, y, r, ry, path, rcirc, rycirc, points, w, h, x2, x3, x4, x5, x6, y2, y3, y4, y5, y6, attr;\n    if (type === \"path\" || !element.getBBox) {\n        return element;\n    }\n    path = _createPath(element, \"x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points\");\n    attr = _attrToObj(element, _typeAttrs[type]);\n    if (type === \"rect\") {\n        r = attr.rx;\n        ry = attr.ry || r;\n        x = attr.x;\n        y = attr.y;\n        w = attr.width - r * 2;\n        h = attr.height - ry * 2;\n        if (r || ry) {\n            //if there are rounded corners, render cubic beziers\n            x2 = x + r * (1 - circ);\n            x3 = x + r;\n            x4 = x3 + w;\n            x5 = x4 + r * circ;\n            x6 = x4 + r;\n            y2 = y + ry * (1 - circ);\n            y3 = y + ry;\n            y4 = y3 + h;\n            y5 = y4 + ry * circ;\n            y6 = y4 + ry;\n            data = \"M\" + x6 + \",\" + y3 + \" V\" + y4 + \" C\" + [x6, y5, x5, y6, x4, y6, x4 - (x4 - x3) / 3, y6, x3 + (x4 - x3) / 3, y6, x3, y6, x2, y6, x, y5, x, y4, x, y4 - (y4 - y3) / 3, x, y3 + (y4 - y3) / 3, x, y3, x, y2, x2, y, x3, y, x3 + (x4 - x3) / 3, y, x4 - (x4 - x3) / 3, y, x4, y, x5, y, x6, y2, x6, y3].join(\",\") + \"z\";\n        }\n        else {\n            data = \"M\" + (x + w) + \",\" + y + \" v\" + h + \" h\" + -w + \" v\" + -h + \" h\" + w + \"z\";\n        }\n    }\n    else if (type === \"circle\" || type === \"ellipse\") {\n        if (type === \"circle\") {\n            r = ry = attr.r;\n            rycirc = r * circ;\n        }\n        else {\n            r = attr.rx;\n            ry = attr.ry;\n            rycirc = ry * circ;\n        }\n        x = attr.cx;\n        y = attr.cy;\n        rcirc = r * circ;\n        data = \"M\" + (x + r) + \",\" + y + \" C\" + [x + r, y + rycirc, x + rcirc, y + ry, x, y + ry, x - rcirc, y + ry, x - r, y + rycirc, x - r, y, x - r, y - rycirc, x - rcirc, y - ry, x, y - ry, x + rcirc, y - ry, x + r, y - rycirc, x + r, y].join(\",\") + \"z\";\n    }\n    else if (type === \"line\") {\n        data = \"M\" + attr.x1 + \",\" + attr.y1 + \" L\" + attr.x2 + \",\" + attr.y2; //previously, we just converted to \"Mx,y Lx,y\" but Safari has bugs that cause that not to render properly when using a stroke-dasharray that's not fully visible! Using a cubic bezier fixes that issue.\n    }\n    else if (type === \"polyline\" || type === \"polygon\") {\n        points = (element.getAttribute(\"points\") + \"\").match(_numbersExp) || [];\n        x = points.shift();\n        y = points.shift();\n        data = \"M\" + x + \",\" + y + \" L\" + points.join(\",\");\n        if (type === \"polygon\") {\n            data += \",\" + x + \",\" + y + \"z\";\n        }\n    }\n    path.setAttribute(\"d\", rawPathToString(path._gsRawPath = stringToRawPath(data)));\n    if (swap && element.parentNode) {\n        element.parentNode.insertBefore(path, element);\n        element.parentNode.removeChild(element);\n    }\n    return path;\n} //returns the rotation (in degrees) at a particular progress on a rawPath (the slope of the tangent)\nexport function getRotationAtProgress(rawPath, progress) {\n    var d = getProgressData(rawPath, progress >= 1 ? 1 - 1e-9 : progress ? progress : 1e-9);\n    return getRotationAtBezierT(d.segment, d.i, d.t);\n}\nfunction getRotationAtBezierT(segment, i, t) {\n    var a = segment[i], b = segment[i + 2], c = segment[i + 4], x;\n    a += (b - a) * t;\n    b += (c - b) * t;\n    a += (b - a) * t;\n    x = b + (c + (segment[i + 6] - c) * t - b) * t - a;\n    a = segment[i + 1];\n    b = segment[i + 3];\n    c = segment[i + 5];\n    a += (b - a) * t;\n    b += (c - b) * t;\n    a += (b - a) * t;\n    return _round(_atan2(b + (c + (segment[i + 7] - c) * t - b) * t - a, x) * _RAD2DEG);\n}\nexport function sliceRawPath(rawPath, start, end) {\n    end = _isUndefined(end) ? 1 : _roundPrecise(end) || 0; // we must round to avoid issues like 4.15 / 8 = 0.8300000000000001 instead of 0.83 or 2.8 / 5 = 0.5599999999999999 instead of 0.56 and if someone is doing a loop like start: 2.8 / 0.5, end: 2.8 / 0.5 + 1.\n    start = _roundPrecise(start) || 0;\n    var loops = Math.max(0, ~~(_abs(end - start) - 1e-8)), path = copyRawPath(rawPath);\n    if (start > end) {\n        start = 1 - start;\n        end = 1 - end;\n        _reverseRawPath(path);\n        path.totalLength = 0;\n    }\n    if (start < 0 || end < 0) {\n        var offset = Math.abs(~~Math.min(start, end)) + 1;\n        start += offset;\n        end += offset;\n    }\n    path.totalLength || cacheRawPathMeasurements(path);\n    var wrap = end > 1, s = getProgressData(path, start, _temp, true), e = getProgressData(path, end, _temp2), eSeg = e.segment, sSeg = s.segment, eSegIndex = e.segIndex, sSegIndex = s.segIndex, ei = e.i, si = s.i, sameSegment = sSegIndex === eSegIndex, sameBezier = ei === si && sameSegment, wrapsBehind, sShift, eShift, i, copy, totalSegments, l, j;\n    if (wrap || loops) {\n        wrapsBehind = eSegIndex < sSegIndex || sameSegment && ei < si || sameBezier && e.t < s.t;\n        if (_splitSegment(path, sSegIndex, si, s.t)) {\n            sSegIndex++;\n            if (!wrapsBehind) {\n                eSegIndex++;\n                if (sameBezier) {\n                    e.t = (e.t - s.t) / (1 - s.t);\n                    ei = 0;\n                }\n                else if (sameSegment) {\n                    ei -= si;\n                }\n            }\n        }\n        if (1 - (end - start) < 1e-5) {\n            eSegIndex = sSegIndex - 1;\n        }\n        else if (!e.t && eSegIndex) {\n            eSegIndex--;\n        }\n        else if (_splitSegment(path, eSegIndex, ei, e.t) && wrapsBehind) {\n            sSegIndex++;\n        }\n        if (s.t === 1) {\n            sSegIndex = (sSegIndex + 1) % path.length;\n        }\n        copy = [];\n        totalSegments = path.length;\n        l = 1 + totalSegments * loops;\n        j = sSegIndex;\n        l += (totalSegments - sSegIndex + eSegIndex) % totalSegments;\n        for (i = 0; i < l; i++) {\n            _appendOrMerge(copy, path[j++ % totalSegments]);\n        }\n        path = copy;\n    }\n    else {\n        eShift = e.t === 1 ? 6 : subdivideSegment(eSeg, ei, e.t);\n        if (start !== end) {\n            sShift = subdivideSegment(sSeg, si, sameBezier ? s.t / e.t : s.t);\n            sameSegment && (eShift += sShift);\n            eSeg.splice(ei + eShift + 2);\n            (sShift || si) && sSeg.splice(0, si + sShift);\n            i = path.length;\n            while (i--) {\n                //chop off any extra segments\n                (i < sSegIndex || i > eSegIndex) && path.splice(i, 1);\n            }\n        }\n        else {\n            eSeg.angle = getRotationAtBezierT(eSeg, ei + eShift, 0); //record the value before we chop because it'll be impossible to determine the angle after its length is 0!\n            ei += eShift;\n            s = eSeg[ei];\n            e = eSeg[ei + 1];\n            eSeg.length = eSeg.totalLength = 0;\n            eSeg.totalPoints = path.totalPoints = 8;\n            eSeg.push(s, e, s, e, s, e, s, e);\n        }\n    }\n    path.totalLength = 0;\n    return path;\n} //measures a Segment according to its resolution (so if segment.resolution is 6, for example, it'll take 6 samples equally across each Bezier) and create/populate a \"samples\" Array that has the length up to each of those sample points (always increasing from the start) as well as a \"lookup\" array that's broken up according to the smallest distance between 2 samples. This gives us a very fast way of looking up a progress position rather than looping through all the points/Beziers. You can optionally have it only measure a subset, starting at startIndex and going for a specific number of beziers (remember, there are 3 x/y pairs each, for a total of 6 elements for each Bezier). It will also populate a \"totalLength\" property, but that's not generally super accurate because by default it'll only take 6 samples per Bezier. But for performance reasons, it's perfectly adequate for measuring progress values along the path. If you need a more accurate totalLength, either increase the resolution or use the more advanced bezierToPoints() method which keeps adding points until they don't deviate by more than a certain precision value.\nfunction measureSegment(segment, startIndex, bezierQty) {\n    startIndex = startIndex || 0;\n    if (!segment.samples) {\n        segment.samples = [];\n        segment.lookup = [];\n    }\n    var resolution = ~~segment.resolution || 12, inc = 1 / resolution, endIndex = bezierQty ? startIndex + bezierQty * 6 + 1 : segment.length, x1 = segment[startIndex], y1 = segment[startIndex + 1], samplesIndex = startIndex ? startIndex / 6 * resolution : 0, samples = segment.samples, lookup = segment.lookup, min = (startIndex ? segment.minLength : _largeNum) || _largeNum, prevLength = samples[samplesIndex + bezierQty * resolution - 1], length = startIndex ? samples[samplesIndex - 1] : 0, i, j, x4, x3, x2, xd, xd1, y4, y3, y2, yd, yd1, inv, t, lengthIndex, l, segLength;\n    samples.length = lookup.length = 0;\n    for (j = startIndex + 2; j < endIndex; j += 6) {\n        x4 = segment[j + 4] - x1;\n        x3 = segment[j + 2] - x1;\n        x2 = segment[j] - x1;\n        y4 = segment[j + 5] - y1;\n        y3 = segment[j + 3] - y1;\n        y2 = segment[j + 1] - y1;\n        xd = xd1 = yd = yd1 = 0;\n        if (_abs(x4) < .01 && _abs(y4) < .01 && _abs(x2) + _abs(y2) < .01) {\n            //dump points that are sufficiently close (basically right on top of each other, making a bezier super tiny or 0 length)\n            if (segment.length > 8) {\n                segment.splice(j, 6);\n                j -= 6;\n                endIndex -= 6;\n            }\n        }\n        else {\n            for (i = 1; i <= resolution; i++) {\n                t = inc * i;\n                inv = 1 - t;\n                xd = xd1 - (xd1 = (t * t * x4 + 3 * inv * (t * x3 + inv * x2)) * t);\n                yd = yd1 - (yd1 = (t * t * y4 + 3 * inv * (t * y3 + inv * y2)) * t);\n                l = _sqrt(yd * yd + xd * xd);\n                if (l < min) {\n                    min = l;\n                }\n                length += l;\n                samples[samplesIndex++] = length;\n            }\n        }\n        x1 += x4;\n        y1 += y4;\n    }\n    if (prevLength) {\n        prevLength -= length;\n        for (; samplesIndex < samples.length; samplesIndex++) {\n            samples[samplesIndex] += prevLength;\n        }\n    }\n    if (samples.length && min) {\n        segment.totalLength = segLength = samples[samples.length - 1] || 0;\n        segment.minLength = min;\n        if (segLength / min < 9999) {\n            // if the lookup would require too many values (memory problem), we skip this and instead we use a loop to lookup values directly in the samples Array\n            l = lengthIndex = 0;\n            for (i = 0; i < segLength; i += min) {\n                lookup[l++] = samples[lengthIndex] < i ? ++lengthIndex : lengthIndex;\n            }\n        }\n    }\n    else {\n        segment.totalLength = samples[0] = 0;\n    }\n    return startIndex ? length - samples[startIndex / 2 - 1] : length;\n}\nexport function cacheRawPathMeasurements(rawPath, resolution) {\n    var pathLength, points, i;\n    for (i = pathLength = points = 0; i < rawPath.length; i++) {\n        rawPath[i].resolution = ~~resolution || 12; //steps per Bezier curve (anchor, 2 control points, to anchor)\n        points += rawPath[i].length;\n        pathLength += measureSegment(rawPath[i]);\n    }\n    rawPath.totalPoints = points;\n    rawPath.totalLength = pathLength;\n    return rawPath;\n} //divide segment[i] at position t (value between 0 and 1, progress along that particular cubic bezier segment that starts at segment[i]). Returns how many elements were spliced into the segment array (either 0 or 6)\nexport function subdivideSegment(segment, i, t) {\n    if (t <= 0 || t >= 1) {\n        return 0;\n    }\n    var ax = segment[i], ay = segment[i + 1], cp1x = segment[i + 2], cp1y = segment[i + 3], cp2x = segment[i + 4], cp2y = segment[i + 5], bx = segment[i + 6], by = segment[i + 7], x1a = ax + (cp1x - ax) * t, x2 = cp1x + (cp2x - cp1x) * t, y1a = ay + (cp1y - ay) * t, y2 = cp1y + (cp2y - cp1y) * t, x1 = x1a + (x2 - x1a) * t, y1 = y1a + (y2 - y1a) * t, x2a = cp2x + (bx - cp2x) * t, y2a = cp2y + (by - cp2y) * t;\n    x2 += (x2a - x2) * t;\n    y2 += (y2a - y2) * t;\n    segment.splice(i + 2, 4, _round(x1a), //first control point\n    _round(y1a), _round(x1), //second control point\n    _round(y1), _round(x1 + (x2 - x1) * t), //new fabricated anchor on line\n    _round(y1 + (y2 - y1) * t), _round(x2), //third control point\n    _round(y2), _round(x2a), //fourth control point\n    _round(y2a));\n    segment.samples && segment.samples.splice(i / 6 * segment.resolution | 0, 0, 0, 0, 0, 0, 0, 0);\n    return 6;\n} // returns an object {path, segment, segIndex, i, t}\nfunction getProgressData(rawPath, progress, decoratee, pushToNextIfAtEnd) {\n    decoratee = decoratee || {};\n    rawPath.totalLength || cacheRawPathMeasurements(rawPath);\n    if (progress < 0 || progress > 1) {\n        progress = _wrapProgress(progress);\n    }\n    var segIndex = 0, segment = rawPath[0], samples, resolution, length, min, max, i, t;\n    if (!progress) {\n        t = i = segIndex = 0;\n        segment = rawPath[0];\n    }\n    else if (progress === 1) {\n        t = 1;\n        segIndex = rawPath.length - 1;\n        segment = rawPath[segIndex];\n        i = segment.length - 8;\n    }\n    else {\n        if (rawPath.length > 1) {\n            //speed optimization: most of the time, there's only one segment so skip the recursion.\n            length = rawPath.totalLength * progress;\n            max = i = 0;\n            while ((max += rawPath[i++].totalLength) < length) {\n                segIndex = i;\n            }\n            segment = rawPath[segIndex];\n            min = max - segment.totalLength;\n            progress = (length - min) / (max - min) || 0;\n        }\n        samples = segment.samples;\n        resolution = segment.resolution; //how many samples per cubic bezier chunk\n        length = segment.totalLength * progress;\n        i = segment.lookup.length ? segment.lookup[~~(length / segment.minLength)] || 0 : _getSampleIndex(samples, length, progress);\n        min = i ? samples[i - 1] : 0;\n        max = samples[i];\n        if (max < length) {\n            min = max;\n            max = samples[++i];\n        }\n        t = 1 / resolution * ((length - min) / (max - min) + i % resolution);\n        i = ~~(i / resolution) * 6;\n        if (pushToNextIfAtEnd && t === 1) {\n            if (i + 6 < segment.length) {\n                i += 6;\n                t = 0;\n            }\n            else if (segIndex + 1 < rawPath.length) {\n                i = t = 0;\n                segment = rawPath[++segIndex];\n            }\n        }\n    }\n    decoratee.t = t;\n    decoratee.i = i;\n    decoratee.path = rawPath;\n    decoratee.segment = segment;\n    decoratee.segIndex = segIndex;\n    return decoratee;\n}\nexport function getPositionOnPath(rawPath, progress, includeAngle, point) {\n    var segment = rawPath[0], result = point || {}, samples, resolution, length, min, max, i, t, a, inv;\n    if (progress < 0 || progress > 1) {\n        progress = _wrapProgress(progress);\n    }\n    if (rawPath.length > 1) {\n        //speed optimization: most of the time, there's only one segment so skip the recursion.\n        length = rawPath.totalLength * progress;\n        max = i = 0;\n        while ((max += rawPath[i++].totalLength) < length) {\n            segment = rawPath[i];\n        }\n        min = max - segment.totalLength;\n        progress = (length - min) / (max - min) || 0;\n    }\n    samples = segment.samples;\n    resolution = segment.resolution;\n    length = segment.totalLength * progress;\n    i = segment.lookup.length ? segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0 : _getSampleIndex(samples, length, progress);\n    min = i ? samples[i - 1] : 0;\n    max = samples[i];\n    if (max < length) {\n        min = max;\n        max = samples[++i];\n    }\n    t = 1 / resolution * ((length - min) / (max - min) + i % resolution) || 0;\n    inv = 1 - t;\n    i = ~~(i / resolution) * 6;\n    a = segment[i];\n    result.x = _round((t * t * (segment[i + 6] - a) + 3 * inv * (t * (segment[i + 4] - a) + inv * (segment[i + 2] - a))) * t + a);\n    result.y = _round((t * t * (segment[i + 7] - (a = segment[i + 1])) + 3 * inv * (t * (segment[i + 5] - a) + inv * (segment[i + 3] - a))) * t + a);\n    if (includeAngle) {\n        result.angle = segment.totalLength ? getRotationAtBezierT(segment, i, t >= 1 ? 1 - 1e-9 : t ? t : 1e-9) : segment.angle || 0;\n    }\n    return result;\n} //applies a matrix transform to RawPath (or a segment in a RawPath) and returns whatever was passed in (it transforms the values in the array(s), not a copy).\nexport function transformRawPath(rawPath, a, b, c, d, tx, ty) {\n    var j = rawPath.length, segment, l, i, x, y;\n    while (--j > -1) {\n        segment = rawPath[j];\n        l = segment.length;\n        for (i = 0; i < l; i += 2) {\n            x = segment[i];\n            y = segment[i + 1];\n            segment[i] = x * a + y * c + tx;\n            segment[i + 1] = x * b + y * d + ty;\n        }\n    }\n    rawPath._dirty = 1;\n    return rawPath;\n} // translates SVG arc data into a segment (cubic beziers). Angle is in degrees.\nfunction arcToSegment(lastX, lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y) {\n    if (lastX === x && lastY === y) {\n        return;\n    }\n    rx = _abs(rx);\n    ry = _abs(ry);\n    var angleRad = angle % 360 * _DEG2RAD, cosAngle = _cos(angleRad), sinAngle = _sin(angleRad), PI = Math.PI, TWOPI = PI * 2, dx2 = (lastX - x) / 2, dy2 = (lastY - y) / 2, x1 = cosAngle * dx2 + sinAngle * dy2, y1 = -sinAngle * dx2 + cosAngle * dy2, x1_sq = x1 * x1, y1_sq = y1 * y1, radiiCheck = x1_sq / (rx * rx) + y1_sq / (ry * ry);\n    if (radiiCheck > 1) {\n        rx = _sqrt(radiiCheck) * rx;\n        ry = _sqrt(radiiCheck) * ry;\n    }\n    var rx_sq = rx * rx, ry_sq = ry * ry, sq = (rx_sq * ry_sq - rx_sq * y1_sq - ry_sq * x1_sq) / (rx_sq * y1_sq + ry_sq * x1_sq);\n    if (sq < 0) {\n        sq = 0;\n    }\n    var coef = (largeArcFlag === sweepFlag ? -1 : 1) * _sqrt(sq), cx1 = coef * (rx * y1 / ry), cy1 = coef * -(ry * x1 / rx), sx2 = (lastX + x) / 2, sy2 = (lastY + y) / 2, cx = sx2 + (cosAngle * cx1 - sinAngle * cy1), cy = sy2 + (sinAngle * cx1 + cosAngle * cy1), ux = (x1 - cx1) / rx, uy = (y1 - cy1) / ry, vx = (-x1 - cx1) / rx, vy = (-y1 - cy1) / ry, temp = ux * ux + uy * uy, angleStart = (uy < 0 ? -1 : 1) * Math.acos(ux / _sqrt(temp)), angleExtent = (ux * vy - uy * vx < 0 ? -1 : 1) * Math.acos((ux * vx + uy * vy) / _sqrt(temp * (vx * vx + vy * vy)));\n    isNaN(angleExtent) && (angleExtent = PI); //rare edge case. Math.cos(-1) is NaN.\n    if (!sweepFlag && angleExtent > 0) {\n        angleExtent -= TWOPI;\n    }\n    else if (sweepFlag && angleExtent < 0) {\n        angleExtent += TWOPI;\n    }\n    angleStart %= TWOPI;\n    angleExtent %= TWOPI;\n    var segments = Math.ceil(_abs(angleExtent) / (TWOPI / 4)), rawPath = [], angleIncrement = angleExtent / segments, controlLength = 4 / 3 * _sin(angleIncrement / 2) / (1 + _cos(angleIncrement / 2)), ma = cosAngle * rx, mb = sinAngle * rx, mc = sinAngle * -ry, md = cosAngle * ry, i;\n    for (i = 0; i < segments; i++) {\n        angle = angleStart + i * angleIncrement;\n        x1 = _cos(angle);\n        y1 = _sin(angle);\n        ux = _cos(angle += angleIncrement);\n        uy = _sin(angle);\n        rawPath.push(x1 - controlLength * y1, y1 + controlLength * x1, ux + controlLength * uy, uy - controlLength * ux, ux, uy);\n    } //now transform according to the actual size of the ellipse/arc (the beziers were noramlized, between 0 and 1 on a circle).\n    for (i = 0; i < rawPath.length; i += 2) {\n        x1 = rawPath[i];\n        y1 = rawPath[i + 1];\n        rawPath[i] = x1 * ma + y1 * mc + cx;\n        rawPath[i + 1] = x1 * mb + y1 * md + cy;\n    }\n    rawPath[i - 2] = x; //always set the end to exactly where it's supposed to be\n    rawPath[i - 1] = y;\n    return rawPath;\n} //Spits back a RawPath with absolute coordinates. Each segment starts with a \"moveTo\" command (x coordinate, then y) and then 2 control points (x, y, x, y), then anchor. The goal is to minimize memory and maximize speed.\nexport function stringToRawPath(d) {\n    var a = (d + \"\").replace(_scientific, function (m) {\n        var n = +m;\n        return n < 0.0001 && n > -0.0001 ? 0 : n;\n    }).match(_svgPathExp) || [], \n    //some authoring programs spit out very small numbers in scientific notation like \"1e-5\", so make sure we round that down to 0 first.\n    path = [], relativeX = 0, relativeY = 0, twoThirds = 2 / 3, elements = a.length, points = 0, errorMessage = \"ERROR: malformed path: \" + d, i, j, x, y, command, isRelative, segment, startX, startY, difX, difY, beziers, prevCommand, flag1, flag2, line = function line(sx, sy, ex, ey) {\n        difX = (ex - sx) / 3;\n        difY = (ey - sy) / 3;\n        segment.push(sx + difX, sy + difY, ex - difX, ey - difY, ex, ey);\n    };\n    if (!d || !isNaN(a[0]) || isNaN(a[1])) {\n        console.log(errorMessage);\n        return path;\n    }\n    for (i = 0; i < elements; i++) {\n        prevCommand = command;\n        if (isNaN(a[i])) {\n            command = a[i].toUpperCase();\n            isRelative = command !== a[i]; //lower case means relative\n        }\n        else {\n            //commands like \"C\" can be strung together without any new command characters between.\n            i--;\n        }\n        x = +a[i + 1];\n        y = +a[i + 2];\n        if (isRelative) {\n            x += relativeX;\n            y += relativeY;\n        }\n        if (!i) {\n            startX = x;\n            startY = y;\n        } // \"M\" (move)\n        if (command === \"M\") {\n            if (segment) {\n                if (segment.length < 8) {\n                    //if the path data was funky and just had a M with no actual drawing anywhere, skip it.\n                    path.length -= 1;\n                }\n                else {\n                    points += segment.length;\n                }\n            }\n            relativeX = startX = x;\n            relativeY = startY = y;\n            segment = [x, y];\n            path.push(segment);\n            i += 2;\n            command = \"L\"; //an \"M\" with more than 2 values gets interpreted as \"lineTo\" commands (\"L\").\n            // \"C\" (cubic bezier)\n        }\n        else if (command === \"C\") {\n            if (!segment) {\n                segment = [0, 0];\n            }\n            if (!isRelative) {\n                relativeX = relativeY = 0;\n            } //note: \"*1\" is just a fast/short way to cast the value as a Number. WAAAY faster in Chrome, slightly slower in Firefox.\n            segment.push(x, y, relativeX + a[i + 3] * 1, relativeY + a[i + 4] * 1, relativeX += a[i + 5] * 1, relativeY += a[i + 6] * 1);\n            i += 6; // \"S\" (continuation of cubic bezier)\n        }\n        else if (command === \"S\") {\n            difX = relativeX;\n            difY = relativeY;\n            if (prevCommand === \"C\" || prevCommand === \"S\") {\n                difX += relativeX - segment[segment.length - 4];\n                difY += relativeY - segment[segment.length - 3];\n            }\n            if (!isRelative) {\n                relativeX = relativeY = 0;\n            }\n            segment.push(difX, difY, x, y, relativeX += a[i + 3] * 1, relativeY += a[i + 4] * 1);\n            i += 4; // \"Q\" (quadratic bezier)\n        }\n        else if (command === \"Q\") {\n            difX = relativeX + (x - relativeX) * twoThirds;\n            difY = relativeY + (y - relativeY) * twoThirds;\n            if (!isRelative) {\n                relativeX = relativeY = 0;\n            }\n            relativeX += a[i + 3] * 1;\n            relativeY += a[i + 4] * 1;\n            segment.push(difX, difY, relativeX + (x - relativeX) * twoThirds, relativeY + (y - relativeY) * twoThirds, relativeX, relativeY);\n            i += 4; // \"T\" (continuation of quadratic bezier)\n        }\n        else if (command === \"T\") {\n            difX = relativeX - segment[segment.length - 4];\n            difY = relativeY - segment[segment.length - 3];\n            segment.push(relativeX + difX, relativeY + difY, x + (relativeX + difX * 1.5 - x) * twoThirds, y + (relativeY + difY * 1.5 - y) * twoThirds, relativeX = x, relativeY = y);\n            i += 2; // \"H\" (horizontal line)\n        }\n        else if (command === \"H\") {\n            line(relativeX, relativeY, relativeX = x, relativeY);\n            i += 1; // \"V\" (vertical line)\n        }\n        else if (command === \"V\") {\n            //adjust values because the first (and only one) isn't x in this case, it's y.\n            line(relativeX, relativeY, relativeX, relativeY = x + (isRelative ? relativeY - relativeX : 0));\n            i += 1; // \"L\" (line) or \"Z\" (close)\n        }\n        else if (command === \"L\" || command === \"Z\") {\n            if (command === \"Z\") {\n                x = startX;\n                y = startY;\n                segment.closed = true;\n            }\n            if (command === \"L\" || _abs(relativeX - x) > 0.5 || _abs(relativeY - y) > 0.5) {\n                line(relativeX, relativeY, x, y);\n                if (command === \"L\") {\n                    i += 2;\n                }\n            }\n            relativeX = x;\n            relativeY = y; // \"A\" (arc)\n        }\n        else if (command === \"A\") {\n            flag1 = a[i + 4];\n            flag2 = a[i + 5];\n            difX = a[i + 6];\n            difY = a[i + 7];\n            j = 7;\n            if (flag1.length > 1) {\n                // for cases when the flags are merged, like \"a8 8 0 018 8\" (the 0 and 1 flags are WITH the x value of 8, but it could also be \"a8 8 0 01-8 8\" so it may include x or not)\n                if (flag1.length < 3) {\n                    difY = difX;\n                    difX = flag2;\n                    j--;\n                }\n                else {\n                    difY = flag2;\n                    difX = flag1.substr(2);\n                    j -= 2;\n                }\n                flag2 = flag1.charAt(1);\n                flag1 = flag1.charAt(0);\n            }\n            beziers = arcToSegment(relativeX, relativeY, +a[i + 1], +a[i + 2], +a[i + 3], +flag1, +flag2, (isRelative ? relativeX : 0) + difX * 1, (isRelative ? relativeY : 0) + difY * 1);\n            i += j;\n            if (beziers) {\n                for (j = 0; j < beziers.length; j++) {\n                    segment.push(beziers[j]);\n                }\n            }\n            relativeX = segment[segment.length - 2];\n            relativeY = segment[segment.length - 1];\n        }\n        else {\n            console.log(errorMessage);\n        }\n    }\n    i = segment.length;\n    if (i < 6) {\n        //in case there's odd SVG like a M0,0 command at the very end.\n        path.pop();\n        i = 0;\n    }\n    else if (segment[0] === segment[i - 2] && segment[1] === segment[i - 1]) {\n        segment.closed = true;\n    }\n    path.totalPoints = points + i;\n    return path;\n} //populates the points array in alternating x/y values (like [x, y, x, y...] instead of individual point objects [{x, y}, {x, y}...] to conserve memory and stay in line with how we're handling segment arrays\nexport function bezierToPoints(x1, y1, x2, y2, x3, y3, x4, y4, threshold, points, index) {\n    var x12 = (x1 + x2) / 2, y12 = (y1 + y2) / 2, x23 = (x2 + x3) / 2, y23 = (y2 + y3) / 2, x34 = (x3 + x4) / 2, y34 = (y3 + y4) / 2, x123 = (x12 + x23) / 2, y123 = (y12 + y23) / 2, x234 = (x23 + x34) / 2, y234 = (y23 + y34) / 2, x1234 = (x123 + x234) / 2, y1234 = (y123 + y234) / 2, dx = x4 - x1, dy = y4 - y1, d2 = _abs((x2 - x4) * dy - (y2 - y4) * dx), d3 = _abs((x3 - x4) * dy - (y3 - y4) * dx), length;\n    if (!points) {\n        points = [x1, y1, x4, y4];\n        index = 2;\n    }\n    points.splice(index || points.length - 2, 0, x1234, y1234);\n    if ((d2 + d3) * (d2 + d3) > threshold * (dx * dx + dy * dy)) {\n        length = points.length;\n        bezierToPoints(x1, y1, x12, y12, x123, y123, x1234, y1234, threshold, points, index);\n        bezierToPoints(x1234, y1234, x234, y234, x34, y34, x4, y4, threshold, points, index + 2 + (points.length - length));\n    }\n    return points;\n}\n/*\nfunction getAngleBetweenPoints(x0, y0, x1, y1, x2, y2) { //angle between 3 points in radians\n    var dx1 = x1 - x0,\n        dy1 = y1 - y0,\n        dx2 = x2 - x1,\n        dy2 = y2 - y1,\n        dx3 = x2 - x0,\n        dy3 = y2 - y0,\n        a = dx1 * dx1 + dy1 * dy1,\n        b = dx2 * dx2 + dy2 * dy2,\n        c = dx3 * dx3 + dy3 * dy3;\n    return Math.acos( (a + b - c) / _sqrt(4 * a * b) );\n},\n*/\n//pointsToSegment() doesn't handle flat coordinates (where y is always 0) the way we need (the resulting control points are always right on top of the anchors), so this function basically makes the control points go directly up and down, varying in length based on the curviness (more curvy, further control points)\nexport function flatPointsToSegment(points, curviness) {\n    if (curviness === void 0) {\n        curviness = 1;\n    }\n    var x = points[0], y = 0, segment = [x, y], i = 2;\n    for (; i < points.length; i += 2) {\n        segment.push(x, y, points[i], y = (points[i] - x) * curviness / 2, x = points[i], -y);\n    }\n    return segment;\n} //points is an array of x/y points, like [x, y, x, y, x, y]\nexport function pointsToSegment(points, curviness, cornerThreshold) {\n    //points = simplifyPoints(points, tolerance);\n    _abs(points[0] - points[2]) < 1e-4 && _abs(points[1] - points[3]) < 1e-4 && (points = points.slice(2)); // if the first two points are super close, dump the first one.\n    var l = points.length - 2, x = +points[0], y = +points[1], nextX = +points[2], nextY = +points[3], segment = [x, y, x, y], dx2 = nextX - x, dy2 = nextY - y, closed = Math.abs(points[l] - x) < 0.001 && Math.abs(points[l + 1] - y) < 0.001, prevX, prevY, angle, slope, i, dx1, dx3, dy1, dy3, d1, d2, a, b, c;\n    if (isNaN(cornerThreshold)) {\n        cornerThreshold = Math.PI / 10;\n    }\n    if (closed) {\n        // if the start and end points are basically on top of each other, close the segment by adding the 2nd point to the end, and the 2nd-to-last point to the beginning (we'll remove them at the end, but this allows the curvature to look perfect)\n        points.push(nextX, nextY);\n        nextX = x;\n        nextY = y;\n        x = points[l - 2];\n        y = points[l - 1];\n        points.unshift(x, y);\n        l += 4;\n    }\n    curviness = curviness || curviness === 0 ? +curviness : 1;\n    for (i = 2; i < l; i += 2) {\n        prevX = x;\n        prevY = y;\n        x = nextX;\n        y = nextY;\n        nextX = +points[i + 2];\n        nextY = +points[i + 3];\n        if (x === nextX && y === nextY) {\n            continue;\n        }\n        dx1 = dx2;\n        dy1 = dy2;\n        dx2 = nextX - x;\n        dy2 = nextY - y;\n        dx3 = nextX - prevX;\n        dy3 = nextY - prevY;\n        a = dx1 * dx1 + dy1 * dy1;\n        b = dx2 * dx2 + dy2 * dy2;\n        c = dx3 * dx3 + dy3 * dy3;\n        angle = Math.acos((a + b - c) / _sqrt(4 * a * b)); //angle between the 3 points\n        d2 = angle / Math.PI * curviness; //temporary precalculation for speed (reusing d2 variable)\n        d1 = _sqrt(a) * d2; //the tighter the angle, the shorter we make the handles in proportion.\n        d2 *= _sqrt(b);\n        if (x !== prevX || y !== prevY) {\n            if (angle > cornerThreshold) {\n                slope = _atan2(dy3, dx3);\n                segment.push(_round(x - _cos(slope) * d1), //first control point\n                _round(y - _sin(slope) * d1), _round(x), //anchor\n                _round(y), _round(x + _cos(slope) * d2), //second control point\n                _round(y + _sin(slope) * d2));\n            }\n            else {\n                slope = _atan2(dy1, dx1);\n                segment.push(_round(x - _cos(slope) * d1), //first control point\n                _round(y - _sin(slope) * d1));\n                slope = _atan2(dy2, dx2);\n                segment.push(_round(x), //anchor\n                _round(y), _round(x + _cos(slope) * d2), //second control point\n                _round(y + _sin(slope) * d2));\n            }\n        }\n    }\n    x !== nextX || y !== nextY || segment.length < 4 ? segment.push(_round(nextX), _round(nextY), _round(nextX), _round(nextY)) : segment.length -= 2;\n    if (closed) {\n        segment.splice(0, 6);\n        segment.length = segment.length - 6;\n    }\n    return segment;\n} //returns the squared distance between an x/y coordinate and a segment between x1/y1 and x2/y2\nfunction pointToSegDist(x, y, x1, y1, x2, y2) {\n    var dx = x2 - x1, dy = y2 - y1, t;\n    if (dx || dy) {\n        t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n        if (t > 1) {\n            x1 = x2;\n            y1 = y2;\n        }\n        else if (t > 0) {\n            x1 += dx * t;\n            y1 += dy * t;\n        }\n    }\n    return Math.pow(x - x1, 2) + Math.pow(y - y1, 2);\n}\nfunction simplifyStep(points, first, last, tolerance, simplified) {\n    var maxSqDist = tolerance, firstX = points[first], firstY = points[first + 1], lastX = points[last], lastY = points[last + 1], index, i, d;\n    for (i = first + 2; i < last; i += 2) {\n        d = pointToSegDist(points[i], points[i + 1], firstX, firstY, lastX, lastY);\n        if (d > maxSqDist) {\n            index = i;\n            maxSqDist = d;\n        }\n    }\n    if (maxSqDist > tolerance) {\n        index - first > 2 && simplifyStep(points, first, index, tolerance, simplified);\n        simplified.push(points[index], points[index + 1]);\n        last - index > 2 && simplifyStep(points, index, last, tolerance, simplified);\n    }\n} //points is an array of x/y values like [x, y, x, y, x, y]\nexport function simplifyPoints(points, tolerance) {\n    var prevX = parseFloat(points[0]), prevY = parseFloat(points[1]), temp = [prevX, prevY], l = points.length - 2, i, x, y, dx, dy, result, last;\n    tolerance = Math.pow(tolerance || 1, 2);\n    for (i = 2; i < l; i += 2) {\n        x = parseFloat(points[i]);\n        y = parseFloat(points[i + 1]);\n        dx = prevX - x;\n        dy = prevY - y;\n        if (dx * dx + dy * dy > tolerance) {\n            temp.push(x, y);\n            prevX = x;\n            prevY = y;\n        }\n    }\n    temp.push(parseFloat(points[l]), parseFloat(points[l + 1]));\n    last = temp.length - 2;\n    result = [temp[0], temp[1]];\n    simplifyStep(temp, 0, last, tolerance, result);\n    result.push(temp[last], temp[last + 1]);\n    return result;\n}\nfunction getClosestProgressOnBezier(iterations, px, py, start, end, slices, x0, y0, x1, y1, x2, y2, x3, y3) {\n    var inc = (end - start) / slices, best = 0, t = start, x, y, d, dx, dy, inv;\n    _bestDistance = _largeNum;\n    while (t <= end) {\n        inv = 1 - t;\n        x = inv * inv * inv * x0 + 3 * inv * inv * t * x1 + 3 * inv * t * t * x2 + t * t * t * x3;\n        y = inv * inv * inv * y0 + 3 * inv * inv * t * y1 + 3 * inv * t * t * y2 + t * t * t * y3;\n        dx = x - px;\n        dy = y - py;\n        d = dx * dx + dy * dy;\n        if (d < _bestDistance) {\n            _bestDistance = d;\n            best = t;\n        }\n        t += inc;\n    }\n    return iterations > 1 ? getClosestProgressOnBezier(iterations - 1, px, py, Math.max(best - inc, 0), Math.min(best + inc, 1), slices, x0, y0, x1, y1, x2, y2, x3, y3) : best;\n}\nexport function getClosestData(rawPath, x, y, slices) {\n    //returns an object with the closest j, i, and t (j is the segment index, i is the index of the point in that segment, and t is the time/progress along that bezier)\n    var closest = {\n        j: 0,\n        i: 0,\n        t: 0\n    }, bestDistance = _largeNum, i, j, t, segment;\n    for (j = 0; j < rawPath.length; j++) {\n        segment = rawPath[j];\n        for (i = 0; i < segment.length; i += 6) {\n            t = getClosestProgressOnBezier(1, x, y, 0, 1, slices || 20, segment[i], segment[i + 1], segment[i + 2], segment[i + 3], segment[i + 4], segment[i + 5], segment[i + 6], segment[i + 7]);\n            if (bestDistance > _bestDistance) {\n                bestDistance = _bestDistance;\n                closest.j = j;\n                closest.i = i;\n                closest.t = t;\n            }\n        }\n    }\n    return closest;\n} //subdivide a Segment closest to a specific x,y coordinate\nexport function subdivideSegmentNear(x, y, segment, slices, iterations) {\n    var l = segment.length, bestDistance = _largeNum, bestT = 0, bestSegmentIndex = 0, t, i;\n    slices = slices || 20;\n    iterations = iterations || 3;\n    for (i = 0; i < l; i += 6) {\n        t = getClosestProgressOnBezier(1, x, y, 0, 1, slices, segment[i], segment[i + 1], segment[i + 2], segment[i + 3], segment[i + 4], segment[i + 5], segment[i + 6], segment[i + 7]);\n        if (bestDistance > _bestDistance) {\n            bestDistance = _bestDistance;\n            bestT = t;\n            bestSegmentIndex = i;\n        }\n    }\n    t = getClosestProgressOnBezier(iterations, x, y, bestT - 0.05, bestT + 0.05, slices, segment[bestSegmentIndex], segment[bestSegmentIndex + 1], segment[bestSegmentIndex + 2], segment[bestSegmentIndex + 3], segment[bestSegmentIndex + 4], segment[bestSegmentIndex + 5], segment[bestSegmentIndex + 6], segment[bestSegmentIndex + 7]);\n    subdivideSegment(segment, bestSegmentIndex, t);\n    return bestSegmentIndex + 6;\n}\n/*\nTakes any of the following and converts it to an all Cubic Bezier SVG data string:\n- A <path> data string like \"M0,0 L2,4 v20,15 H100\"\n- A RawPath, like [[x, y, x, y, x, y, x, y][[x, y, x, y, x, y, x, y]]\n- A Segment, like [x, y, x, y, x, y, x, y]\n\nNote: all numbers are rounded down to the closest 0.001 to minimize memory, maximize speed, and avoid odd numbers like 1e-13\n*/\nexport function rawPathToString(rawPath) {\n    if (_isNumber(rawPath[0])) {\n        //in case a segment is passed in instead\n        rawPath = [rawPath];\n    }\n    var result = \"\", l = rawPath.length, sl, s, i, segment;\n    for (s = 0; s < l; s++) {\n        segment = rawPath[s];\n        result += \"M\" + _round(segment[0]) + \",\" + _round(segment[1]) + \" C\";\n        sl = segment.length;\n        for (i = 2; i < sl; i++) {\n            result += _round(segment[i++]) + \",\" + _round(segment[i++]) + \" \" + _round(segment[i++]) + \",\" + _round(segment[i++]) + \" \" + _round(segment[i++]) + \",\" + _round(segment[i]) + \" \";\n        }\n        if (segment.closed) {\n            result += \"z\";\n        }\n    }\n    return result;\n}\n/*\n// takes a segment with coordinates [x, y, x, y, ...] and converts the control points into angles and lengths [x, y, angle, length, angle, length, x, y, angle, length, ...] so that it animates more cleanly and avoids odd breaks/kinks. For example, if you animate from 1 o'clock to 6 o'clock, it'd just go directly/linearly rather than around. So the length would be very short in the middle of the tween.\nexport function cpCoordsToAngles(segment, copy) {\n    var result = copy ? segment.slice(0) : segment,\n        x, y, i;\n    for (i = 0; i < segment.length; i+=6) {\n        x = segment[i+2] - segment[i];\n        y = segment[i+3] - segment[i+1];\n        result[i+2] = Math.atan2(y, x);\n        result[i+3] = Math.sqrt(x * x + y * y);\n        x = segment[i+6] - segment[i+4];\n        y = segment[i+7] - segment[i+5];\n        result[i+4] = Math.atan2(y, x);\n        result[i+5] = Math.sqrt(x * x + y * y);\n    }\n    return result;\n}\n\n// takes a segment that was converted with cpCoordsToAngles() to have angles and lengths instead of coordinates for the control points, and converts it BACK into coordinates.\nexport function cpAnglesToCoords(segment, copy) {\n    var result = copy ? segment.slice(0) : segment,\n        length = segment.length,\n        rnd = 1000,\n        angle, l, i, j;\n    for (i = 0; i < length; i+=6) {\n        angle = segment[i+2];\n        l = segment[i+3]; //length\n        result[i+2] = (((segment[i] + Math.cos(angle) * l) * rnd) | 0) / rnd;\n        result[i+3] = (((segment[i+1] + Math.sin(angle) * l) * rnd) | 0) / rnd;\n        angle = segment[i+4];\n        l = segment[i+5]; //length\n        result[i+4] = (((segment[i+6] - Math.cos(angle) * l) * rnd) | 0) / rnd;\n        result[i+5] = (((segment[i+7] - Math.sin(angle) * l) * rnd) | 0) / rnd;\n    }\n    return result;\n}\n\n//adds an \"isSmooth\" array to each segment and populates it with a boolean value indicating whether or not it's smooth (the control points have basically the same slope). For any smooth control points, it converts the coordinates into angle (x, in radians) and length (y) and puts them into the same index value in a smoothData array.\nexport function populateSmoothData(rawPath) {\n    let j = rawPath.length,\n        smooth, segment, x, y, x2, y2, i, l, a, a2, isSmooth, smoothData;\n    while (--j > -1) {\n        segment = rawPath[j];\n        isSmooth = segment.isSmooth = segment.isSmooth || [0, 0, 0, 0];\n        smoothData = segment.smoothData = segment.smoothData || [0, 0, 0, 0];\n        isSmooth.length = 4;\n        l = segment.length - 2;\n        for (i = 6; i < l; i += 6) {\n            x = segment[i] - segment[i - 2];\n            y = segment[i + 1] - segment[i - 1];\n            x2 = segment[i + 2] - segment[i];\n            y2 = segment[i + 3] - segment[i + 1];\n            a = _atan2(y, x);\n            a2 = _atan2(y2, x2);\n            smooth = (Math.abs(a - a2) < 0.09);\n            if (smooth) {\n                smoothData[i - 2] = a;\n                smoothData[i + 2] = a2;\n                smoothData[i - 1] = _sqrt(x * x + y * y);\n                smoothData[i + 3] = _sqrt(x2 * x2 + y2 * y2);\n            }\n            isSmooth.push(smooth, smooth, 0, 0, smooth, smooth);\n        }\n        //if the first and last points are identical, check to see if there's a smooth transition. We must handle this a bit differently due to their positions in the array.\n        if (segment[l] === segment[0] && segment[l+1] === segment[1]) {\n            x = segment[0] - segment[l-2];\n            y = segment[1] - segment[l-1];\n            x2 = segment[2] - segment[0];\n            y2 = segment[3] - segment[1];\n            a = _atan2(y, x);\n            a2 = _atan2(y2, x2);\n            if (Math.abs(a - a2) < 0.09) {\n                smoothData[l-2] = a;\n                smoothData[2] = a2;\n                smoothData[l-1] = _sqrt(x * x + y * y);\n                smoothData[3] = _sqrt(x2 * x2 + y2 * y2);\n                isSmooth[l-2] = isSmooth[l-1] = true; //don't change indexes 2 and 3 because we'll trigger everything from the END, and this will optimize file size a bit.\n            }\n        }\n    }\n    return rawPath;\n}\nexport function pointToScreen(svgElement, point) {\n    if (arguments.length < 2) { //by default, take the first set of coordinates in the path as the point\n        let rawPath = getRawPath(svgElement);\n        point = svgElement.ownerSVGElement.createSVGPoint();\n        point.x = rawPath[0][0];\n        point.y = rawPath[0][1];\n    }\n    return point.matrixTransform(svgElement.getScreenCTM());\n}\n\n*/ \n"],"mappings":"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","ignoreList":[]}