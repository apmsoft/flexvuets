ES6+, TypeScript, Tailwind CSS

http://flexvue.fancyupsoft.com


# TypeScript install
npm install --save-dev -D typescript
npx tsc --init

npm install --save-dev @types/node
npm install --save-dev babel-plugin-module-resolver
npm install --save-dev @babel/cli
npm install --save-dev @types/jquery

# fs-extra
npm install --save-dev fs-extra

# tailwind css install
https://tailwindcss.com/docs/installation

npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init
npm install -D @tailwindcss/forms
npm install -D @tailwindcss/aspect-ratio

>> global.d.ts
interface Window {
  observable: Observable;
  Observer : Observer;
  Arrays : Arrays;
  Sysmsg : Sysmsg;
  Strings : Strings;
}

>> tsconfig.json
{
  "compilerOptions": {
    "target": "es6",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "checkJs": false,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": false,
    "strictNullChecks": true,
    "noImplicitAny" : false,
    "module": "ESNext",
    "outDir": "debug",
    "rootDir": "src",
    "types": ["node", "jquery"],
  },
  "include": [
    "src/**/*",
    "global.d.ts"
  ],
  "exclude": [
    "node_modules","**/*.spec.ts"
  ],
  "extends": "./tsconfig.paths.json",
}

>> babel
.babelrc
{
  "sourceMaps": false,
  "retainLines": true,
  // "presets": ["@babel/preset-typescript"],
  "plugins": [
    [ "module-resolver", {
        "alias": {
          "src": "./debug"
          ,"@flexvue":"./debug/flexvue"
          // ,"@editorjs/editorjs": "./debug/plugins/@editorjs/editorjs/dist/editorjs.mjs"
          // ,"@editorjs/simple-image": "./debug/plugins/@editorjs/simple-image/dist/simple-image.mjs"
          // ,"@editorjs/header": "./debug/plugins/@editorjs/header/dist/header.mjs"
          // ,"@editorjs/link": "./debug/plugins/@editorjs/link/dist/link.mjs"
          // ,"@editorjs/image": "./debug/plugins/@editorjs/image/dist/image.mjs"
          // ,"@editorjs/table": "./debug/plugins/@editorjs/table/dist/table.mjs"
          // ,"@editorjs/code": "./debug/plugins/@editorjs/code/dist/code.mjs"
          // ,"@editorjs/list": "./debug/plugins/@editorjs/list/dist/list.mjs"
          // ,"@editorjs/embed": "./debug/plugins/@editorjs/embed/dist/embed.mjs"
          // ,"@editorjs/checklist": "./debug/plugins/@editorjs/checklist/dist/checklist.mjs"
          // ,"@editorjs/quote": "./debug/plugins/@editorjs/quote/dist/quote.mjs"
          // ,"swiper/bundle": "./debug/plugins/swiper/swiper-bundle.min.mjs"
          // ,"vanilla-calendar-pro": "./debug/plugins/vanilla-calendar-pro/build/vanilla-calendar.min.mjs"
          // ,"filepond": "./debug/plugins/filepond/dist/filepond.esm.min.js"
          // ,"filepond-plugin-image-preview": "./debug/plugins/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.esm.min.js"
          // ,"filepond-plugin-file-validate-size": "./debug/plugins/filepond-plugin-file-validate-size/dist/filepond-plugin-file-validate-size.esm.min.js"
          // ,"filepond-plugin-file-validate-type": "./debug/plugins/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.esm.min.js"
          // ,"filepond-plugin-image-validate-size": "./debug/plugins/filepond-plugin-image-validate-size/dist/filepond-plugin-image-validate-size.esm.min.js"
          // ,"apexcharts": "./debug/plugins/apexcharts/dist/apexcharts.esm.js"
        }
      }
    ]
  ]
}

>> hintrc
{
  "extends": [
    "development"
  ],
  "hints": {
    "axe/text-alternatives": [
      "default",
      {
        "image-alt": "off" // 이미지의 대체 텍스트가 없어도 경고를 생성하지 않도록 설정
      }
    ],
    "axe/forms": [
      "default",
      {
        "label": "off" // 폼 요소에 레이블이 없어도 경고를 생성하지 않도록 설정
      }
    ]
  }
}

>> tsconfig.paths.json
{
  "compilerOptions": {
      "types": ["node", "jquery"],
      "baseUrl": ".",
      "paths" : {
          "src/*": ["src/*"],
          "@flexvue/*": ["src/flexvue/*"],
          // "@editorjs/editorjs": ["node_modules/@editorjs/editorjs"],
          // "@editorjs/simple-image": ["node_modules/@editorjs/simple-image"],
          // "@editorjs/header": ["node_modules/@editorjs/header"],
          // "@editorjs/link": ["node_modules/@editorjs/link"],
          // "@editorjs/image": ["node_modules/@editorjs/image"],
          // "@editorjs/table": ["node_modules/@editorjs/table"],
          // "@editorjs/code": ["node_modules/@editorjs/code"],
          // "@editorjs/list": ["node_modules/@editorjs/list"],
          // "@editorjs/embed": ["node_modules/@editorjs/embed"],
          // "@editorjs/checklist": ["node_modules/@editorjs/checklist"],
          // "@editorjs/quote": ["node_modules/@editorjs/quote"],
          // "swiper/bundle": ["node_modules/swiper"],
      }
  }
}


# 파일 하나씩 또는 디렉토리 단위로
tsc src/flexvue/flexvue.ts -outFile ./dist/flexvue/flexvue.js
tsc src/flexvue/flexvue.ts -outDir ./dist/flexvue/

# nodejs build setting
>> package.json
{
  "name": "flexvue",
  "version": "3.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "build": "tsc -P ./tsconfig.json && babel debug -d debug",
    "start": "tsc -P ./tsconfig.json --watch && babel debug --out-dir debug --watch",
    "release": "cp -fr ./debug/* ./release/v1",
    "clean": "tsc --build --clean",
    "clean_release": "rm -fr ./release/v1/*",
    "css": "npx tailwindcss -i ./tailwind.css -o ./debug/css/tailwind.css --watch --minify"
  },
  "author": "fancyupsoft.com",
  "license": "ISC",
  "dependencies": {
    "typescript": "^4.5.5"
  },
  "devDependencies": {
    "ts-node": "^10.5.0"
  }
}

>> create file export-plugin.js : package.json 의 dependencies 로 설치된 프로그램만 자동 복사
const fs = require('fs-extra');
const path = require('path');

// package.json 파일의 경로
const packageJsonPath = path.join(__dirname, 'package.json');

// package.json 파일 읽기
fs.readFile(packageJsonPath, 'utf8', (err, data) => {
  if (err) {
    console.error('Error reading package.json:', err);
    return;
  }

  // package.json 파싱
  const packageJson = JSON.parse(data);

  // dependencies에서 패키지 목록 추출export
  const dependencies = packageJson.dependencies || {};

  // 복사할 디렉토리
  const destinationDir = path.join(__dirname, 'debug', 'plugins');

  // 각 패키지의 파일 복사
  Object.keys(dependencies).forEach(dependency => {
    const packagePath = path.join(__dirname, 'node_modules', dependency);
    fs.copy(packagePath, path.join(destinationDir, dependency), err => {
      if (err) {
        console.error(`Error copying files for ${dependency}:`, err);
      } else {
        console.log(`Files copied successfully for ${dependency}.`);
      }
    });
  });
});

>> npm run debug
>> npm run build
>> npm run clean
>> npm run css // tailwindcss

>> npm run release // release 폴더로 debug 작업물 복사
>> npm run clean_release // release 폴더 및 파일 전체 삭제